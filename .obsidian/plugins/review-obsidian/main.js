'use strict';

var obsidian = require('obsidian');
var path = require('path');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var obsidian__default = /*#__PURE__*/_interopDefaultLegacy(obsidian);
var path__default = /*#__PURE__*/_interopDefaultLegacy(path);

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function createCommonjsModule(fn, basedir, module) {
	return module = {
		path: basedir,
		exports: {},
		require: function (path, base) {
			return commonjsRequire(path, (base === undefined || base === null) ? module.path : base);
		}
	}, fn(module, module.exports), module.exports;
}

function commonjsRequire () {
	throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
}

var main = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, '__esModule', { value: true });




/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var DEFAULT_DATE_FORMAT = "YYYY-MM-DD";
function getNotePath(directory, filename) {
    if (!filename.endsWith(".md")) {
        filename += ".md";
    }
    return obsidian__default['default'].normalizePath(path__default['default'].join(directory, filename));
}
/**
 * Read the user settings for the `daily-notes` plugin
 * to keep behavior of creating a new note in-sync.
 */
function getDailyNoteSettings() {
    var _a, _b;
    try {
        // XXX: Access private API for internal plugins
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var settings = window.app.internalPlugins.plugins["daily-notes"]
            .instance.options;
        return {
            format: settings.format || DEFAULT_DATE_FORMAT,
            folder: ((_a = settings.folder) === null || _a === void 0 ? void 0 : _a.trim()) || "",
            template: ((_b = settings.template) === null || _b === void 0 ? void 0 : _b.trim()) || "",
        };
    }
    catch (err) {
        console.info("No custom daily note settings found!", err);
    }
}
function appHasDailyNotesPluginLoaded() {
    var app = window.app;
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    var dailyNotesPlugin = app.internalPlugins.plugins["daily-notes"];
    return dailyNotesPlugin && dailyNotesPlugin.enabled;
}
function getTemplateContents(template) {
    return __awaiter(this, void 0, void 0, function () {
        var app, metadataCache, vault, templatePath, templateFile, contents, err_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    app = window.app;
                    metadataCache = app.metadataCache, vault = app.vault;
                    templatePath = obsidian__default['default'].normalizePath(template);
                    if (templatePath === "/") {
                        return [2 /*return*/, Promise.resolve("")];
                    }
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    templateFile = metadataCache.getFirstLinkpathDest(templatePath, "");
                    return [4 /*yield*/, vault.cachedRead(templateFile)];
                case 2:
                    contents = _a.sent();
                    return [2 /*return*/, contents];
                case 3:
                    err_1 = _a.sent();
                    console.error("Failed to read daily note template '" + templatePath + "'", err_1);
                    new obsidian__default['default'].Notice("Failed to read the daily note template");
                    return [2 /*return*/, ""];
                case 4: return [2 /*return*/];
            }
        });
    });
}
/**
 * This function mimics the behavior of the daily-notes plugin
 * so it will replace {{date}}, {{title}}, and {{time}} with the
 * formatted timestamp.
 *
 * Note: it has an added bonus that it's not 'today' specific.
 */
function createDailyNote(date) {
    return __awaiter(this, void 0, void 0, function () {
        var app, vault, moment, _a, template, format, folder, templateContents, filename, normalizedPath, createdFile, err_2;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    app = window.app;
                    vault = app.vault;
                    moment = window.moment;
                    _a = getDailyNoteSettings(), template = _a.template, format = _a.format, folder = _a.folder;
                    return [4 /*yield*/, getTemplateContents(template)];
                case 1:
                    templateContents = _b.sent();
                    filename = date.format(format);
                    normalizedPath = getNotePath(folder, filename);
                    _b.label = 2;
                case 2:
                    _b.trys.push([2, 4, , 5]);
                    return [4 /*yield*/, vault.create(normalizedPath, templateContents
                            .replace(/{{\s*(date|time)\s*:(.*?)}}/gi, function (_, timeOrDate, momentFormat) {
                            return date.format(momentFormat.trim());
                        })
                            .replace(/{{\s*date\s*}}/gi, filename)
                            .replace(/{{\s*time\s*}}/gi, moment().format("HH:mm"))
                            .replace(/{{\s*title\s*}}/gi, filename))];
                case 3:
                    createdFile = _b.sent();
                    return [2 /*return*/, createdFile];
                case 4:
                    err_2 = _b.sent();
                    console.error("Failed to create file: '" + normalizedPath + "'", err_2);
                    new obsidian__default['default'].Notice("Unable to create new file.");
                    return [3 /*break*/, 5];
                case 5: return [2 /*return*/];
            }
        });
    });
}

exports.DEFAULT_DATE_FORMAT = DEFAULT_DATE_FORMAT;
exports.appHasDailyNotesPluginLoaded = appHasDailyNotesPluginLoaded;
exports.createDailyNote = createDailyNote;
exports.getDailyNoteSettings = getDailyNoteSettings;
exports.getTemplateContents = getTemplateContents;

});

var Review = /** @class */ (function (_super) {
    __extends(Review, _super);
    function Review() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Review.prototype.onload = function () {
        return __awaiter(this, void 0, void 0, function () {
            var naturalLanguageDates, _a;
            var _this_1 = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        console.log('Loading the Review plugin.');
                        // Check that plugins can be accessed.
                        console.log(app.plugins.plugins);
                        naturalLanguageDates = app.plugins.getPlugin('nldates-obsidian');
                        if (!naturalLanguageDates) {
                            new obsidian.Notice("The Natural Language Dates plugin was not found. The Review plugin requires the Natural Language Dates plugin. Please install it first and make sure it is enabled before using Review.");
                        }
                        _a = this;
                        return [4 /*yield*/, this.loadData()];
                    case 1:
                        _a.settings = (_b.sent()) || new ReviewSettings();
                        this.addCommand({
                            id: 'future-review',
                            name: 'Add this note to a daily note for review',
                            checkCallback: function (checking) {
                                var leaf = _this_1.app.workspace.activeLeaf;
                                if (leaf) {
                                    if (!checking) {
                                        new ReviewModal(_this_1.app).open();
                                    }
                                    return true;
                                }
                                return false;
                            }
                        });
                        this.addCommand({
                            id: 'future-review-block',
                            name: 'Add this block to a daily note for review',
                            checkCallback: function (checking) {
                                var leaf = _this_1.app.workspace.activeLeaf;
                                if (leaf) {
                                    if (!checking) {
                                        new ReviewBlockModal(_this_1.app).open();
                                    }
                                    return true;
                                }
                                return false;
                            }
                        });
                        this.addSettingTab(new ReviewSettingTab(this.app, this));
                        return [2 /*return*/];
                }
            });
        });
    };
    Review.prototype.onunload = function () {
        console.log('The Review Dates plugin has been disabled and unloaded.');
    };
    Review.prototype.createBlockHash = function (inputText) {
        var obsidianApp = this.app;
        var result = '';
        var characters = 'abcdefghijklmnopqrstuvwxyz0123456789';
        var charactersLength = characters.length;
        for (var i = 0; i < 7; i++) {
            result += characters.charAt(Math.floor(Math.random() * charactersLength));
        }
        return result;
    };
    Review.prototype.getBlock = function (inputLine, noteFile) {
        var obsidianApp = this.app;
        var noteBlocks = obsidianApp.metadataCache.getFileCache(noteFile).blocks;
        console.log("Checking if line '" + inputLine + "' is a block.");
        var blockString = "";
        if (noteBlocks) { // the file does contain blocks. If not, return ""
            for (var eachBlock in noteBlocks) { // iterate through the blocks. 
                console.log("Checking block ^" + eachBlock);
                var blockRegExp = new RegExp("(" + eachBlock + ")$", "gim");
                if (inputLine.match(blockRegExp)) { // if end of inputLine matches block, return it
                    blockString = eachBlock;
                    console.log("Found block ^" + blockString);
                    return blockString;
                }
            }
            return blockString;
        }
        return blockString;
    };
    Review.prototype.setReviewDate = function (someDate, someBlock) {
        return __awaiter(this, void 0, void 0, function () {
            var obsidianApp, naturalLanguageDates, parsedResult, inputDate, notesFolder, notesPath, reviewHeading, reviewLinePrefix, noteName_1, noteFile_1, noteLink_1, lineBlockID, lineWithBlock_1, files, dateFile_1, noteText, newDateFile, templateText, previousNoteText_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        obsidianApp = this.app;
                        naturalLanguageDates = obsidianApp.plugins.getPlugin('nldates-obsidian');
                        if (!naturalLanguageDates) {
                            new obsidian.Notice("The Natural Language Dates plugin is not available. Please make sure it is installed and enabled before trying again.");
                            return [2 /*return*/];
                        }
                        if (someDate === "") {
                            someDate = this.settings.defaultReviewDate;
                        }
                        parsedResult = naturalLanguageDates.parseDate(someDate);
                        inputDate = parsedResult.formattedString;
                        console.log("Date string to use: " + inputDate);
                        notesFolder = this.settings.dailyNotesFolder;
                        notesPath = "";
                        if (notesFolder === "") {
                            notesPath = "/"; // If the user is using the root for their daily notes, don't add a second /.
                        }
                        else {
                            notesPath = "/" + notesFolder + "/";
                        }
                        console.log("The path to daily notes: " + notesPath);
                        reviewHeading = this.settings.reviewSectionHeading;
                        console.log("The review section heading is: " + reviewHeading);
                        reviewLinePrefix = this.settings.linePrefix;
                        console.log("The line prefix is: " + reviewLinePrefix);
                        if (!parsedResult.moment.isValid()) return [3 /*break*/, 5];
                        noteName_1 = obsidianApp.workspace.activeLeaf.getDisplayText();
                        noteFile_1 = obsidianApp.workspace.activeLeaf.view.file;
                        noteLink_1 = obsidianApp.metadataCache.fileToLinktext(noteFile_1, noteFile_1.path, true);
                        if (someBlock != undefined) {
                            console.log("Checking for block:");
                            lineBlockID = this.getBlock(someBlock, noteFile_1);
                            console.log(lineBlockID);
                            if (this.getBlock(someBlock, noteFile_1) === "") { // The line is not already a block
                                console.log("This line is not currently a block. Adding a block ID.");
                                lineBlockID = this.createBlockHash(someBlock).toString();
                                lineWithBlock_1 = someBlock + " ^" + lineBlockID;
                                obsidianApp.vault.read(noteFile_1).then(function (result) {
                                    var previousNoteText = result;
                                    var newNoteText = previousNoteText.replace(someBlock, lineWithBlock_1);
                                    obsidianApp.vault.modify(noteFile_1, newNoteText);
                                });
                            }
                            noteLink_1 = noteLink_1 + "#^" + lineBlockID;
                            reviewLinePrefix = this.settings.blockLinePrefix;
                        }
                        files = obsidianApp.vault.getFiles();
                        dateFile_1 = files.filter(function (e) { return e.name === inputDate //hat-tip 🎩 to @MrJackPhil for this little workflow 
                            || e.path === inputDate
                            || e.basename === inputDate; })[0];
                        console.log("File found:" + dateFile_1);
                        if (!!dateFile_1) return [3 /*break*/, 3];
                        console.log("The daily note for the given date does not exist yet. Creating it, then appending the review section.");
                        noteText = reviewHeading + "\n" + reviewLinePrefix + "[[" + noteLink_1 + "]]";
                        return [4 /*yield*/, main.createDailyNote(parsedResult.moment)];
                    case 1:
                        newDateFile = _a.sent();
                        return [4 /*yield*/, obsidianApp.vault.read(newDateFile)];
                    case 2:
                        templateText = _a.sent();
                        //console.log(templateText); // for debugging
                        if (templateText.includes(reviewHeading)) {
                            noteText = templateText.replace(reviewHeading, noteText);
                        }
                        else {
                            noteText = templateText + "\n" + noteText;
                        }
                        obsidianApp.vault.modify(newDateFile, noteText);
                        new obsidian.Notice("Set note \"" + noteName_1 + "\" for review on " + inputDate + ".");
                        return [3 /*break*/, 4];
                    case 3:
                        console.log("The daily note already exists for the date given. Adding this note to it for review.");
                        previousNoteText_1 = "";
                        obsidianApp.vault.read(dateFile_1).then(function (result) {
                            previousNoteText_1 = result;
                            console.log("Previous Note text:\n" + previousNoteText_1);
                            var newNoteText = "";
                            if (previousNoteText_1.includes(reviewHeading)) {
                                newNoteText = previousNoteText_1.replace(reviewHeading, reviewHeading + "\n" + reviewLinePrefix + "[[" + noteLink_1 + "]]");
                            }
                            else {
                                newNoteText = previousNoteText_1 + "\n" + reviewHeading + "\n" + reviewLinePrefix + "[[" + noteLink_1 + "]]";
                            }
                            obsidianApp.vault.modify(dateFile_1, newNoteText);
                            new obsidian.Notice("Set note \"" + noteName_1 + "\" for review on " + inputDate + ".");
                        });
                        _a.label = 4;
                    case 4: return [3 /*break*/, 6];
                    case 5:
                        new obsidian.Notice("You've entered an invalid date (note that \"two weeks\" will not work, but \"in two weeks\" will). The note was not set for review. Please try again.");
                        _a.label = 6;
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    return Review;
}(obsidian.Plugin));
var ReviewSettings = /** @class */ (function () {
    function ReviewSettings() {
        this.dailyNotesFolder = "";
        this.reviewSectionHeading = "## Review";
        this.linePrefix = "- ";
        this.defaultReviewDate = "tomorrow";
        this.blockLinePrefix = "!";
    }
    return ReviewSettings;
}());
var ReviewModal = /** @class */ (function (_super) {
    __extends(ReviewModal, _super);
    function ReviewModal(app) {
        return _super.call(this, app) || this;
    }
    ReviewModal.prototype.onOpen = function () {
        var _this_1 = this;
        var _this = this;
        console.log(_this);
        var contentEl = this.contentEl;
        var inputDateField = new obsidian.TextComponent(contentEl)
            .setPlaceholder(this.app.plugins.getPlugin("review-obsidian").settings.defaultReviewDate);
        var inputButton = new obsidian.ButtonComponent(contentEl)
            .setButtonText("Set Review Date")
            .onClick(function () {
            var inputDate = inputDateField.getValue();
            _this.app.plugins.getPlugin("review-obsidian").setReviewDate(inputDate);
            _this_1.close();
        });
        inputDateField.inputEl.focus();
        inputDateField.inputEl.addEventListener('keypress', function (keypressed) {
            if (keypressed.key === 'Enter') {
                var inputDate = inputDateField.getValue();
                _this.app.plugins.getPlugin("review-obsidian").setReviewDate(inputDate);
                _this.close();
            }
        });
    };
    ReviewModal.prototype.onClose = function () {
        var contentEl = this.contentEl;
        contentEl.empty();
    };
    return ReviewModal;
}(obsidian.Modal));
var ReviewBlockModal = /** @class */ (function (_super) {
    __extends(ReviewBlockModal, _super);
    function ReviewBlockModal(app) {
        return _super.call(this, app) || this;
    }
    ReviewBlockModal.prototype.onOpen = function () {
        var _this_1 = this;
        var _this = this;
        var editor = this.app.workspace.activeLeaf.view.sourceMode.cmEditor;
        var cursor = editor.getCursor();
        var lineText = editor.getLine(cursor.line);
        console.log(_this);
        var contentEl = this.contentEl;
        var inputDateField = new obsidian.TextComponent(contentEl)
            .setPlaceholder(this.app.plugins.getPlugin("review-obsidian").settings.defaultReviewDate);
        var inputButton = new obsidian.ButtonComponent(contentEl)
            .setButtonText("Set Review Date")
            .onClick(function () {
            var inputDate = inputDateField.getValue();
            _this.app.plugins.getPlugin("review-obsidian").setReviewDate(inputDate, lineText);
            _this_1.close();
        });
        inputDateField.inputEl.focus();
        inputDateField.inputEl.addEventListener('keypress', function (keypressed) {
            if (keypressed.key === 'Enter') {
                var inputDate = inputDateField.getValue();
                _this.app.plugins.getPlugin("review-obsidian").setReviewDate(inputDate, lineText);
                _this.close();
            }
        });
    };
    ReviewBlockModal.prototype.onClose = function () {
        var contentEl = this.contentEl;
        contentEl.empty();
    };
    return ReviewBlockModal;
}(obsidian.Modal));
var ReviewSettingTab = /** @class */ (function (_super) {
    __extends(ReviewSettingTab, _super);
    function ReviewSettingTab() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ReviewSettingTab.prototype.display = function () {
        var containerEl = this.containerEl;
        var plugin = this.plugin;
        containerEl.empty();
        containerEl.createEl('h2', { text: 'Review Settings' });
        new obsidian.Setting(containerEl)
            .setName('Daily note location')
            .setDesc('Set the path to your daily notes. Use the format "folder/subfolder". Do not use leading or trailing slashes "/".')
            .addText(function (text) {
            return text
                .setPlaceholder('')
                .setValue(plugin.settings.dailyNotesFolder)
                .onChange(function (value) {
                console.log("The new daily notes folder:" + value);
                plugin.settings.dailyNotesFolder = value;
                plugin.saveData(plugin.settings);
            });
        });
        new obsidian.Setting(containerEl)
            .setName('Review section heading')
            .setDesc('Set the heading to use for the review section. BE CAREFUL: it must be unique in each daily note.')
            .addText(function (text) {
            return text
                .setPlaceholder('## Review')
                .setValue(plugin.settings.reviewSectionHeading)
                .onChange(function (value) {
                if (value === "") {
                    plugin.settings.reviewSectionHeading = "## Review";
                }
                else {
                    plugin.settings.reviewSectionHeading = value;
                }
                plugin.saveData(plugin.settings);
            });
        });
        new obsidian.Setting(containerEl)
            .setName('Line prefix')
            .setDesc('Set the prefix to use on each new line. E.g., use `- ` for bullets or `- [ ] ` for tasks. **Include the trailing space.**')
            .addText(function (text) {
            return text
                .setPlaceholder('- ')
                .setValue(plugin.settings.linePrefix)
                .onChange(function (value) {
                plugin.settings.linePrefix = value;
                plugin.saveData(plugin.settings);
            });
        });
        new obsidian.Setting(containerEl)
            .setName('Block review line prefix')
            .setDesc('Set the prefix used when adding blocks to daily notes with Review. Use e.g., `- [ ] ` to link the block as a task, or `!` to create embeds.')
            .addText(function (text) {
            return text
                .setPlaceholder('!')
                .setValue(plugin.settings.blockLinePrefix)
                .onChange(function (value) {
                plugin.settings.blockLinePrefix = value;
                plugin.saveData(plugin.settings);
            });
        });
        new obsidian.Setting(containerEl)
            .setName('Default review date')
            .setDesc('Set a default date to be used when no date is entered. Use natural language: "Next Monday", "November 5th", and "tomorrow" all work.')
            .addText(function (text) {
            return text
                .setPlaceholder('')
                .setValue(plugin.settings.defaultReviewDate)
                .onChange(function (value) {
                plugin.settings.defaultReviewDate = value;
                plugin.saveData(plugin.settings);
            });
        });
        // containerEl.createEl('h3', { text: 'Preset review schedules' });
        /*
        TKTKTK: Figure out how to add a function to a button inside the setting element. Currently `doSomething`, below, throws errors.
        containerEl.createEl('button', { text: "Add a new review schedule preset", attr: { onclick: "doSomething({ console.log('button clicked') });"}});
        */
    };
    return ReviewSettingTab;
}(obsidian.PluginSettingTab));

module.exports = Review;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXMiOlsibm9kZV9tb2R1bGVzL3RzbGliL3RzbGliLmVzNi5qcyIsIm5vZGVfbW9kdWxlcy9vYnNpZGlhbi1kYWlseS1ub3Rlcy1pbnRlcmZhY2UvZGlzdC9tYWluLmpzIiwibWFpbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uXHJcblxyXG5QZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcclxucHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLlxyXG5cclxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSFxyXG5SRUdBUkQgVE8gVEhJUyBTT0ZUV0FSRSBJTkNMVURJTkcgQUxMIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFlcclxuQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxyXG5JTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST01cclxuTE9TUyBPRiBVU0UsIERBVEEgT1IgUFJPRklUUywgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIE5FR0xJR0VOQ0UgT1JcclxuT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxyXG5QRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xyXG4vKiBnbG9iYWwgUmVmbGVjdCwgUHJvbWlzZSAqL1xyXG5cclxudmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbihkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59XHJcblxyXG5leHBvcnQgdmFyIF9fYXNzaWduID0gZnVuY3Rpb24oKSB7XHJcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH1cclxuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZXN0KHMsIGUpIHtcclxuICAgIHZhciB0ID0ge307XHJcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcclxuICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcclxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xyXG4gICAgICAgIH1cclxuICAgIHJldHVybiB0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcGFyYW0ocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19nZW5lcmF0b3IodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgX19jcmVhdGVCaW5kaW5nID0gT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xyXG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcclxufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICBvW2syXSA9IG1ba107XHJcbn0pO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXhwb3J0U3RhcihtLCBvKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG8sIHApKSBfX2NyZWF0ZUJpbmRpbmcobywgbSwgcCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3ZhbHVlcyhvKSB7XHJcbiAgICB2YXIgcyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaXRlcmF0b3IsIG0gPSBzICYmIG9bc10sIGkgPSAwO1xyXG4gICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XHJcbiAgICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XHJcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xyXG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XHJcbiAgICBpZiAoIW0pIHJldHVybiBvO1xyXG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZCgpIHtcclxuICAgIGZvciAodmFyIGFyID0gW10sIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXlzKCkge1xyXG4gICAgZm9yICh2YXIgcyA9IDAsIGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBzICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XHJcbiAgICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspXHJcbiAgICAgICAgZm9yICh2YXIgYSA9IGFyZ3VtZW50c1tpXSwgaiA9IDAsIGpsID0gYS5sZW5ndGg7IGogPCBqbDsgaisrLCBrKyspXHJcbiAgICAgICAgICAgIHJba10gPSBhW2pdO1xyXG4gICAgcmV0dXJuIHI7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdCh2KSB7XHJcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIF9fYXdhaXQgPyAodGhpcy52ID0gdiwgdGhpcykgOiBuZXcgX19hd2FpdCh2KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNHZW5lcmF0b3IodGhpc0FyZywgX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIGcgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSksIGksIHEgPSBbXTtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpZiAoZ1tuXSkgaVtuXSA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoYSwgYikgeyBxLnB1c2goW24sIHYsIGEsIGJdKSA+IDEgfHwgcmVzdW1lKG4sIHYpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gcmVzdW1lKG4sIHYpIHsgdHJ5IHsgc3RlcChnW25dKHYpKTsgfSBjYXRjaCAoZSkgeyBzZXR0bGUocVswXVszXSwgZSk7IH0gfVxyXG4gICAgZnVuY3Rpb24gc3RlcChyKSB7IHIudmFsdWUgaW5zdGFuY2VvZiBfX2F3YWl0ID8gUHJvbWlzZS5yZXNvbHZlKHIudmFsdWUudikudGhlbihmdWxmaWxsLCByZWplY3QpIDogc2V0dGxlKHFbMF1bMl0sIHIpOyB9XHJcbiAgICBmdW5jdGlvbiBmdWxmaWxsKHZhbHVlKSB7IHJlc3VtZShcIm5leHRcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiByZWplY3QodmFsdWUpIHsgcmVzdW1lKFwidGhyb3dcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUoZiwgdikgeyBpZiAoZih2KSwgcS5zaGlmdCgpLCBxLmxlbmd0aCkgcmVzdW1lKHFbMF1bMF0sIHFbMF1bMV0pOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jRGVsZWdhdG9yKG8pIHtcclxuICAgIHZhciBpLCBwO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiLCBmdW5jdGlvbiAoZSkgeyB0aHJvdyBlOyB9KSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobiwgZikgeyBpW25dID0gb1tuXSA/IGZ1bmN0aW9uICh2KSB7IHJldHVybiAocCA9ICFwKSA/IHsgdmFsdWU6IF9fYXdhaXQob1tuXSh2KSksIGRvbmU6IG4gPT09IFwicmV0dXJuXCIgfSA6IGYgPyBmKHYpIDogdjsgfSA6IGY7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNWYWx1ZXMobykge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBtID0gb1tTeW1ib2wuYXN5bmNJdGVyYXRvcl0sIGk7XHJcbiAgICByZXR1cm4gbSA/IG0uY2FsbChvKSA6IChvID0gdHlwZW9mIF9fdmFsdWVzID09PSBcImZ1bmN0aW9uXCIgPyBfX3ZhbHVlcyhvKSA6IG9bU3ltYm9sLml0ZXJhdG9yXSgpLCBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaSk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaVtuXSA9IG9bbl0gJiYgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdiA9IG9bbl0odiksIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHYuZG9uZSwgdi52YWx1ZSk7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCBkLCB2KSB7IFByb21pc2UucmVzb2x2ZSh2KS50aGVuKGZ1bmN0aW9uKHYpIHsgcmVzb2x2ZSh7IHZhbHVlOiB2LCBkb25lOiBkIH0pOyB9LCByZWplY3QpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ha2VUZW1wbGF0ZU9iamVjdChjb29rZWQsIHJhdykge1xyXG4gICAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29va2VkLCBcInJhd1wiLCB7IHZhbHVlOiByYXcgfSk7IH0gZWxzZSB7IGNvb2tlZC5yYXcgPSByYXc7IH1cclxuICAgIHJldHVybiBjb29rZWQ7XHJcbn07XHJcblxyXG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XHJcbn0pIDogZnVuY3Rpb24obywgdikge1xyXG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0U3Rhcihtb2QpIHtcclxuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XHJcbiAgICB2YXIgcmVzdWx0ID0ge307XHJcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XHJcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0RGVmYXVsdChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgZGVmYXVsdDogbW9kIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHJlY2VpdmVyLCBwcml2YXRlTWFwKSB7XHJcbiAgICBpZiAoIXByaXZhdGVNYXAuaGFzKHJlY2VpdmVyKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJhdHRlbXB0ZWQgdG8gZ2V0IHByaXZhdGUgZmllbGQgb24gbm9uLWluc3RhbmNlXCIpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHByaXZhdGVNYXAuZ2V0KHJlY2VpdmVyKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRTZXQocmVjZWl2ZXIsIHByaXZhdGVNYXAsIHZhbHVlKSB7XHJcbiAgICBpZiAoIXByaXZhdGVNYXAuaGFzKHJlY2VpdmVyKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJhdHRlbXB0ZWQgdG8gc2V0IHByaXZhdGUgZmllbGQgb24gbm9uLWluc3RhbmNlXCIpO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZU1hcC5zZXQocmVjZWl2ZXIsIHZhbHVlKTtcclxuICAgIHJldHVybiB2YWx1ZTtcclxufVxyXG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbnZhciBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xudmFyIG9ic2lkaWFuID0gcmVxdWlyZSgnb2JzaWRpYW4nKTtcblxuLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxyXG5cclxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XHJcbnB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZC5cclxuXHJcblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcclxuUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXHJcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcclxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXHJcbkxPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SXHJcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcclxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuXHJcbmZ1bmN0aW9uIF9fYXdhaXRlcih0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIF9fZ2VuZXJhdG9yKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59XG5cbnZhciBERUZBVUxUX0RBVEVfRk9STUFUID0gXCJZWVlZLU1NLUREXCI7XG5mdW5jdGlvbiBnZXROb3RlUGF0aChkaXJlY3RvcnksIGZpbGVuYW1lKSB7XG4gICAgaWYgKCFmaWxlbmFtZS5lbmRzV2l0aChcIi5tZFwiKSkge1xuICAgICAgICBmaWxlbmFtZSArPSBcIi5tZFwiO1xuICAgIH1cbiAgICByZXR1cm4gb2JzaWRpYW4ubm9ybWFsaXplUGF0aChwYXRoLmpvaW4oZGlyZWN0b3J5LCBmaWxlbmFtZSkpO1xufVxuLyoqXG4gKiBSZWFkIHRoZSB1c2VyIHNldHRpbmdzIGZvciB0aGUgYGRhaWx5LW5vdGVzYCBwbHVnaW5cbiAqIHRvIGtlZXAgYmVoYXZpb3Igb2YgY3JlYXRpbmcgYSBuZXcgbm90ZSBpbi1zeW5jLlxuICovXG5mdW5jdGlvbiBnZXREYWlseU5vdGVTZXR0aW5ncygpIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIHRyeSB7XG4gICAgICAgIC8vIFhYWDogQWNjZXNzIHByaXZhdGUgQVBJIGZvciBpbnRlcm5hbCBwbHVnaW5zXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgIHZhciBzZXR0aW5ncyA9IHdpbmRvdy5hcHAuaW50ZXJuYWxQbHVnaW5zLnBsdWdpbnNbXCJkYWlseS1ub3Rlc1wiXVxuICAgICAgICAgICAgLmluc3RhbmNlLm9wdGlvbnM7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBmb3JtYXQ6IHNldHRpbmdzLmZvcm1hdCB8fCBERUZBVUxUX0RBVEVfRk9STUFULFxuICAgICAgICAgICAgZm9sZGVyOiAoKF9hID0gc2V0dGluZ3MuZm9sZGVyKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudHJpbSgpKSB8fCBcIlwiLFxuICAgICAgICAgICAgdGVtcGxhdGU6ICgoX2IgPSBzZXR0aW5ncy50ZW1wbGF0ZSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnRyaW0oKSkgfHwgXCJcIixcbiAgICAgICAgfTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmluZm8oXCJObyBjdXN0b20gZGFpbHkgbm90ZSBzZXR0aW5ncyBmb3VuZCFcIiwgZXJyKTtcbiAgICB9XG59XG5mdW5jdGlvbiBhcHBIYXNEYWlseU5vdGVzUGx1Z2luTG9hZGVkKCkge1xuICAgIHZhciBhcHAgPSB3aW5kb3cuYXBwO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgdmFyIGRhaWx5Tm90ZXNQbHVnaW4gPSBhcHAuaW50ZXJuYWxQbHVnaW5zLnBsdWdpbnNbXCJkYWlseS1ub3Rlc1wiXTtcbiAgICByZXR1cm4gZGFpbHlOb3Rlc1BsdWdpbiAmJiBkYWlseU5vdGVzUGx1Z2luLmVuYWJsZWQ7XG59XG5mdW5jdGlvbiBnZXRUZW1wbGF0ZUNvbnRlbnRzKHRlbXBsYXRlKSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXBwLCBtZXRhZGF0YUNhY2hlLCB2YXVsdCwgdGVtcGxhdGVQYXRoLCB0ZW1wbGF0ZUZpbGUsIGNvbnRlbnRzLCBlcnJfMTtcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgYXBwID0gd2luZG93LmFwcDtcbiAgICAgICAgICAgICAgICAgICAgbWV0YWRhdGFDYWNoZSA9IGFwcC5tZXRhZGF0YUNhY2hlLCB2YXVsdCA9IGFwcC52YXVsdDtcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVQYXRoID0gb2JzaWRpYW4ubm9ybWFsaXplUGF0aCh0ZW1wbGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ZW1wbGF0ZVBhdGggPT09IFwiL1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgUHJvbWlzZS5yZXNvbHZlKFwiXCIpXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDE7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBfYS50cnlzLnB1c2goWzEsIDMsICwgNF0pO1xuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZUZpbGUgPSBtZXRhZGF0YUNhY2hlLmdldEZpcnN0TGlua3BhdGhEZXN0KHRlbXBsYXRlUGF0aCwgXCJcIik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHZhdWx0LmNhY2hlZFJlYWQodGVtcGxhdGVGaWxlKV07XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBjb250ZW50cyA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGNvbnRlbnRzXTtcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIGVycl8xID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRmFpbGVkIHRvIHJlYWQgZGFpbHkgbm90ZSB0ZW1wbGF0ZSAnXCIgKyB0ZW1wbGF0ZVBhdGggKyBcIidcIiwgZXJyXzEpO1xuICAgICAgICAgICAgICAgICAgICBuZXcgb2JzaWRpYW4uTm90aWNlKFwiRmFpbGVkIHRvIHJlYWQgdGhlIGRhaWx5IG5vdGUgdGVtcGxhdGVcIik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBcIlwiXTtcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IHJldHVybiBbMiAvKnJldHVybiovXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gbWltaWNzIHRoZSBiZWhhdmlvciBvZiB0aGUgZGFpbHktbm90ZXMgcGx1Z2luXG4gKiBzbyBpdCB3aWxsIHJlcGxhY2Uge3tkYXRlfX0sIHt7dGl0bGV9fSwgYW5kIHt7dGltZX19IHdpdGggdGhlXG4gKiBmb3JtYXR0ZWQgdGltZXN0YW1wLlxuICpcbiAqIE5vdGU6IGl0IGhhcyBhbiBhZGRlZCBib251cyB0aGF0IGl0J3Mgbm90ICd0b2RheScgc3BlY2lmaWMuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZURhaWx5Tm90ZShkYXRlKSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXBwLCB2YXVsdCwgbW9tZW50LCBfYSwgdGVtcGxhdGUsIGZvcm1hdCwgZm9sZGVyLCB0ZW1wbGF0ZUNvbnRlbnRzLCBmaWxlbmFtZSwgbm9ybWFsaXplZFBhdGgsIGNyZWF0ZWRGaWxlLCBlcnJfMjtcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xuICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgYXBwID0gd2luZG93LmFwcDtcbiAgICAgICAgICAgICAgICAgICAgdmF1bHQgPSBhcHAudmF1bHQ7XG4gICAgICAgICAgICAgICAgICAgIG1vbWVudCA9IHdpbmRvdy5tb21lbnQ7XG4gICAgICAgICAgICAgICAgICAgIF9hID0gZ2V0RGFpbHlOb3RlU2V0dGluZ3MoKSwgdGVtcGxhdGUgPSBfYS50ZW1wbGF0ZSwgZm9ybWF0ID0gX2EuZm9ybWF0LCBmb2xkZXIgPSBfYS5mb2xkZXI7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGdldFRlbXBsYXRlQ29udGVudHModGVtcGxhdGUpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlQ29udGVudHMgPSBfYi5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIGZpbGVuYW1lID0gZGF0ZS5mb3JtYXQoZm9ybWF0KTtcbiAgICAgICAgICAgICAgICAgICAgbm9ybWFsaXplZFBhdGggPSBnZXROb3RlUGF0aChmb2xkZXIsIGZpbGVuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSAyO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgX2IudHJ5cy5wdXNoKFsyLCA0LCAsIDVdKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdmF1bHQuY3JlYXRlKG5vcm1hbGl6ZWRQYXRoLCB0ZW1wbGF0ZUNvbnRlbnRzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL3t7XFxzKihkYXRlfHRpbWUpXFxzKjooLio/KX19L2dpLCBmdW5jdGlvbiAoXywgdGltZU9yRGF0ZSwgbW9tZW50Rm9ybWF0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGUuZm9ybWF0KG1vbWVudEZvcm1hdC50cmltKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgve3tcXHMqZGF0ZVxccyp9fS9naSwgZmlsZW5hbWUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL3t7XFxzKnRpbWVcXHMqfX0vZ2ksIG1vbWVudCgpLmZvcm1hdChcIkhIOm1tXCIpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC97e1xccyp0aXRsZVxccyp9fS9naSwgZmlsZW5hbWUpKV07XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBjcmVhdGVkRmlsZSA9IF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGNyZWF0ZWRGaWxlXTtcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGVycl8yID0gX2Iuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRmFpbGVkIHRvIGNyZWF0ZSBmaWxlOiAnXCIgKyBub3JtYWxpemVkUGF0aCArIFwiJ1wiLCBlcnJfMik7XG4gICAgICAgICAgICAgICAgICAgIG5ldyBvYnNpZGlhbi5Ob3RpY2UoXCJVbmFibGUgdG8gY3JlYXRlIG5ldyBmaWxlLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNV07XG4gICAgICAgICAgICAgICAgY2FzZSA1OiByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuXG5leHBvcnRzLkRFRkFVTFRfREFURV9GT1JNQVQgPSBERUZBVUxUX0RBVEVfRk9STUFUO1xuZXhwb3J0cy5hcHBIYXNEYWlseU5vdGVzUGx1Z2luTG9hZGVkID0gYXBwSGFzRGFpbHlOb3Rlc1BsdWdpbkxvYWRlZDtcbmV4cG9ydHMuY3JlYXRlRGFpbHlOb3RlID0gY3JlYXRlRGFpbHlOb3RlO1xuZXhwb3J0cy5nZXREYWlseU5vdGVTZXR0aW5ncyA9IGdldERhaWx5Tm90ZVNldHRpbmdzO1xuZXhwb3J0cy5nZXRUZW1wbGF0ZUNvbnRlbnRzID0gZ2V0VGVtcGxhdGVDb250ZW50cztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYldGcGJpNXFjeUlzSW5OdmRYSmpaWE1pT2xzaUxpNHZibTlrWlY5dGIyUjFiR1Z6TDNSemJHbGlMM1J6YkdsaUxtVnpOaTVxY3lJc0lpNHVMM055WXk5cGJtUmxlQzUwY3lKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SXZLaUVnS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpcGNjbHh1UTI5d2VYSnBaMmgwSUNoaktTQk5hV055YjNOdlpuUWdRMjl5Y0c5eVlYUnBiMjR1WEhKY2JseHlYRzVRWlhKdGFYTnphVzl1SUhSdklIVnpaU3dnWTI5d2VTd2diVzlrYVdaNUxDQmhibVF2YjNJZ1pHbHpkSEpwWW5WMFpTQjBhR2x6SUhOdlpuUjNZWEpsSUdadmNpQmhibmxjY2x4dWNIVnljRzl6WlNCM2FYUm9JRzl5SUhkcGRHaHZkWFFnWm1WbElHbHpJR2hsY21WaWVTQm5jbUZ1ZEdWa0xseHlYRzVjY2x4dVZFaEZJRk5QUmxSWFFWSkZJRWxUSUZCU1QxWkpSRVZFSUZ3aVFWTWdTVk5jSWlCQlRrUWdWRWhGSUVGVlZFaFBVaUJFU1ZORFRFRkpUVk1nUVV4TUlGZEJVbEpCVGxSSlJWTWdWMGxVU0Z4eVhHNVNSVWRCVWtRZ1ZFOGdWRWhKVXlCVFQwWlVWMEZTUlNCSlRrTk1WVVJKVGtjZ1FVeE1JRWxOVUV4SlJVUWdWMEZTVWtGT1ZFbEZVeUJQUmlCTlJWSkRTRUZPVkVGQ1NVeEpWRmxjY2x4dVFVNUVJRVpKVkU1RlUxTXVJRWxPSUU1UElFVldSVTVVSUZOSVFVeE1JRlJJUlNCQlZWUklUMUlnUWtVZ1RFbEJRa3hGSUVaUFVpQkJUbGtnVTFCRlEwbEJUQ3dnUkVsU1JVTlVMRnh5WEc1SlRrUkpVa1ZEVkN3Z1QxSWdRMDlPVTBWUlZVVk9WRWxCVENCRVFVMUJSMFZUSUU5U0lFRk9XU0JFUVUxQlIwVlRJRmRJUVZSVFQwVldSVklnVWtWVFZVeFVTVTVISUVaU1QwMWNjbHh1VEU5VFV5QlBSaUJWVTBVc0lFUkJWRUVnVDFJZ1VGSlBSa2xVVXl3Z1YwaEZWRWhGVWlCSlRpQkJUaUJCUTFSSlQwNGdUMFlnUTA5T1ZGSkJRMVFzSUU1RlIweEpSMFZPUTBVZ1QxSmNjbHh1VDFSSVJWSWdWRTlTVkVsUFZWTWdRVU5VU1U5T0xDQkJVa2xUU1U1SElFOVZWQ0JQUmlCUFVpQkpUaUJEVDA1T1JVTlVTVTlPSUZkSlZFZ2dWRWhGSUZWVFJTQlBVbHh5WEc1UVJWSkdUMUpOUVU1RFJTQlBSaUJVU0VsVElGTlBSbFJYUVZKRkxseHlYRzRxS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpQXFMMXh5WEc0dktpQm5iRzlpWVd3Z1VtVm1iR1ZqZEN3Z1VISnZiV2x6WlNBcUwxeHlYRzVjY2x4dWRtRnlJR1Y0ZEdWdVpGTjBZWFJwWTNNZ1BTQm1kVzVqZEdsdmJpaGtMQ0JpS1NCN1hISmNiaUFnSUNCbGVIUmxibVJUZEdGMGFXTnpJRDBnVDJKcVpXTjBMbk5sZEZCeWIzUnZkSGx3WlU5bUlIeDhYSEpjYmlBZ0lDQWdJQ0FnS0hzZ1gxOXdjbTkwYjE5Zk9pQmJYU0I5SUdsdWMzUmhibU5sYjJZZ1FYSnlZWGtnSmlZZ1puVnVZM1JwYjI0Z0tHUXNJR0lwSUhzZ1pDNWZYM0J5YjNSdlgxOGdQU0JpT3lCOUtTQjhmRnh5WEc0Z0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUNoa0xDQmlLU0I3SUdadmNpQW9kbUZ5SUhBZ2FXNGdZaWtnYVdZZ0tFOWlhbVZqZEM1d2NtOTBiM1I1Y0dVdWFHRnpUM2R1VUhKdmNHVnlkSGt1WTJGc2JDaGlMQ0J3S1NrZ1pGdHdYU0E5SUdKYmNGMDdJSDA3WEhKY2JpQWdJQ0J5WlhSMWNtNGdaWGgwWlc1a1UzUmhkR2xqY3loa0xDQmlLVHRjY2x4dWZUdGNjbHh1WEhKY2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCZlgyVjRkR1Z1WkhNb1pDd2dZaWtnZTF4eVhHNGdJQ0FnWlhoMFpXNWtVM1JoZEdsamN5aGtMQ0JpS1R0Y2NseHVJQ0FnSUdaMWJtTjBhVzl1SUY5ZktDa2dleUIwYUdsekxtTnZibk4wY25WamRHOXlJRDBnWkRzZ2ZWeHlYRzRnSUNBZ1pDNXdjbTkwYjNSNWNHVWdQU0JpSUQwOVBTQnVkV3hzSUQ4Z1QySnFaV04wTG1OeVpXRjBaU2hpS1NBNklDaGZYeTV3Y205MGIzUjVjR1VnUFNCaUxuQnliM1J2ZEhsd1pTd2dibVYzSUY5ZktDa3BPMXh5WEc1OVhISmNibHh5WEc1bGVIQnZjblFnZG1GeUlGOWZZWE56YVdkdUlEMGdablZ1WTNScGIyNG9LU0I3WEhKY2JpQWdJQ0JmWDJGemMybG5iaUE5SUU5aWFtVmpkQzVoYzNOcFoyNGdmSHdnWm5WdVkzUnBiMjRnWDE5aGMzTnBaMjRvZENrZ2UxeHlYRzRnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJSE1zSUdrZ1BTQXhMQ0J1SUQwZ1lYSm5kVzFsYm5SekxteGxibWQwYURzZ2FTQThJRzQ3SUdrckt5a2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpJRDBnWVhKbmRXMWxiblJ6VzJsZE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCd0lHbHVJSE1wSUdsbUlDaFBZbXBsWTNRdWNISnZkRzkwZVhCbExtaGhjMDkzYmxCeWIzQmxjblI1TG1OaGJHd29jeXdnY0NrcElIUmJjRjBnUFNCelczQmRPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2REdGNjbHh1SUNBZ0lIMWNjbHh1SUNBZ0lISmxkSFZ5YmlCZlgyRnpjMmxuYmk1aGNIQnNlU2gwYUdsekxDQmhjbWQxYldWdWRITXBPMXh5WEc1OVhISmNibHh5WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWDE5eVpYTjBLSE1zSUdVcElIdGNjbHh1SUNBZ0lIWmhjaUIwSUQwZ2UzMDdYSEpjYmlBZ0lDQm1iM0lnS0haaGNpQndJR2x1SUhNcElHbG1JQ2hQWW1wbFkzUXVjSEp2ZEc5MGVYQmxMbWhoYzA5M2JsQnliM0JsY25SNUxtTmhiR3dvY3l3Z2NDa2dKaVlnWlM1cGJtUmxlRTltS0hBcElEd2dNQ2xjY2x4dUlDQWdJQ0FnSUNCMFczQmRJRDBnYzF0d1hUdGNjbHh1SUNBZ0lHbG1JQ2h6SUNFOUlHNTFiR3dnSmlZZ2RIbHdaVzltSUU5aWFtVmpkQzVuWlhSUGQyNVFjbTl3WlhKMGVWTjViV0p2YkhNZ1BUMDlJRndpWm5WdVkzUnBiMjVjSWlsY2NseHVJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTUN3Z2NDQTlJRTlpYW1WamRDNW5aWFJQZDI1UWNtOXdaWEowZVZONWJXSnZiSE1vY3lrN0lHa2dQQ0J3TG14bGJtZDBhRHNnYVNzcktTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hsTG1sdVpHVjRUMllvY0Z0cFhTa2dQQ0F3SUNZbUlFOWlhbVZqZEM1d2NtOTBiM1I1Y0dVdWNISnZjR1Z5ZEhsSmMwVnVkVzFsY21GaWJHVXVZMkZzYkNoekxDQndXMmxkS1NsY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUmJjRnRwWFYwZ1BTQnpXM0JiYVYxZE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJSEpsZEhWeWJpQjBPMXh5WEc1OVhISmNibHh5WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWDE5a1pXTnZjbUYwWlNoa1pXTnZjbUYwYjNKekxDQjBZWEpuWlhRc0lHdGxlU3dnWkdWell5a2dlMXh5WEc0Z0lDQWdkbUZ5SUdNZ1BTQmhjbWQxYldWdWRITXViR1Z1WjNSb0xDQnlJRDBnWXlBOElETWdQeUIwWVhKblpYUWdPaUJrWlhOaklEMDlQU0J1ZFd4c0lEOGdaR1Z6WXlBOUlFOWlhbVZqZEM1blpYUlBkMjVRY205d1pYSjBlVVJsYzJOeWFYQjBiM0lvZEdGeVoyVjBMQ0JyWlhrcElEb2daR1Z6WXl3Z1pEdGNjbHh1SUNBZ0lHbG1JQ2gwZVhCbGIyWWdVbVZtYkdWamRDQTlQVDBnWENKdlltcGxZM1JjSWlBbUppQjBlWEJsYjJZZ1VtVm1iR1ZqZEM1a1pXTnZjbUYwWlNBOVBUMGdYQ0ptZFc1amRHbHZibHdpS1NCeUlEMGdVbVZtYkdWamRDNWtaV052Y21GMFpTaGtaV052Y21GMGIzSnpMQ0IwWVhKblpYUXNJR3RsZVN3Z1pHVnpZeWs3WEhKY2JpQWdJQ0JsYkhObElHWnZjaUFvZG1GeUlHa2dQU0JrWldOdmNtRjBiM0p6TG14bGJtZDBhQ0F0SURFN0lHa2dQajBnTURzZ2FTMHRLU0JwWmlBb1pDQTlJR1JsWTI5eVlYUnZjbk5iYVYwcElISWdQU0FvWXlBOElETWdQeUJrS0hJcElEb2dZeUErSURNZ1B5QmtLSFJoY21kbGRDd2dhMlY1TENCeUtTQTZJR1FvZEdGeVoyVjBMQ0JyWlhrcEtTQjhmQ0J5TzF4eVhHNGdJQ0FnY21WMGRYSnVJR01nUGlBeklDWW1JSElnSmlZZ1QySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLSFJoY21kbGRDd2dhMlY1TENCeUtTd2djanRjY2x4dWZWeHlYRzVjY2x4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUY5ZmNHRnlZVzBvY0dGeVlXMUpibVJsZUN3Z1pHVmpiM0poZEc5eUtTQjdYSEpjYmlBZ0lDQnlaWFIxY200Z1puVnVZM1JwYjI0Z0tIUmhjbWRsZEN3Z2EyVjVLU0I3SUdSbFkyOXlZWFJ2Y2loMFlYSm5aWFFzSUd0bGVTd2djR0Z5WVcxSmJtUmxlQ2s3SUgxY2NseHVmVnh5WEc1Y2NseHVaWGh3YjNKMElHWjFibU4wYVc5dUlGOWZiV1YwWVdSaGRHRW9iV1YwWVdSaGRHRkxaWGtzSUcxbGRHRmtZWFJoVm1Gc2RXVXBJSHRjY2x4dUlDQWdJR2xtSUNoMGVYQmxiMllnVW1WbWJHVmpkQ0E5UFQwZ1hDSnZZbXBsWTNSY0lpQW1KaUIwZVhCbGIyWWdVbVZtYkdWamRDNXRaWFJoWkdGMFlTQTlQVDBnWENKbWRXNWpkR2x2Ymx3aUtTQnlaWFIxY200Z1VtVm1iR1ZqZEM1dFpYUmhaR0YwWVNodFpYUmhaR0YwWVV0bGVTd2diV1YwWVdSaGRHRldZV3gxWlNrN1hISmNibjFjY2x4dVhISmNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQmZYMkYzWVdsMFpYSW9kR2hwYzBGeVp5d2dYMkZ5WjNWdFpXNTBjeXdnVUN3Z1oyVnVaWEpoZEc5eUtTQjdYSEpjYmlBZ0lDQm1kVzVqZEdsdmJpQmhaRzl3ZENoMllXeDFaU2tnZXlCeVpYUjFjbTRnZG1Gc2RXVWdhVzV6ZEdGdVkyVnZaaUJRSUQ4Z2RtRnNkV1VnT2lCdVpYY2dVQ2htZFc1amRHbHZiaUFvY21WemIyeDJaU2tnZXlCeVpYTnZiSFpsS0haaGJIVmxLVHNnZlNrN0lIMWNjbHh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dLRkFnZkh3Z0tGQWdQU0JRY205dGFYTmxLU2tvWm5WdVkzUnBiMjRnS0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lHWjFibU4wYVc5dUlHWjFiR1pwYkd4bFpDaDJZV3gxWlNrZ2V5QjBjbmtnZXlCemRHVndLR2RsYm1WeVlYUnZjaTV1WlhoMEtIWmhiSFZsS1NrN0lIMGdZMkYwWTJnZ0tHVXBJSHNnY21WcVpXTjBLR1VwT3lCOUlIMWNjbHh1SUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUJ5WldwbFkzUmxaQ2gyWVd4MVpTa2dleUIwY25rZ2V5QnpkR1Z3S0dkbGJtVnlZWFJ2Y2x0Y0luUm9jbTkzWENKZEtIWmhiSFZsS1NrN0lIMGdZMkYwWTJnZ0tHVXBJSHNnY21WcVpXTjBLR1VwT3lCOUlIMWNjbHh1SUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUJ6ZEdWd0tISmxjM1ZzZENrZ2V5QnlaWE4xYkhRdVpHOXVaU0EvSUhKbGMyOXNkbVVvY21WemRXeDBMblpoYkhWbEtTQTZJR0ZrYjNCMEtISmxjM1ZzZEM1MllXeDFaU2t1ZEdobGJpaG1kV3htYVd4c1pXUXNJSEpsYW1WamRHVmtLVHNnZlZ4eVhHNGdJQ0FnSUNBZ0lITjBaWEFvS0dkbGJtVnlZWFJ2Y2lBOUlHZGxibVZ5WVhSdmNpNWhjSEJzZVNoMGFHbHpRWEpuTENCZllYSm5kVzFsYm5SeklIeDhJRnRkS1NrdWJtVjRkQ2dwS1R0Y2NseHVJQ0FnSUgwcE8xeHlYRzU5WEhKY2JseHlYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdYMTluWlc1bGNtRjBiM0lvZEdocGMwRnlaeXdnWW05a2VTa2dlMXh5WEc0Z0lDQWdkbUZ5SUY4Z1BTQjdJR3hoWW1Wc09pQXdMQ0J6Wlc1ME9pQm1kVzVqZEdsdmJpZ3BJSHNnYVdZZ0tIUmJNRjBnSmlBeEtTQjBhSEp2ZHlCMFd6RmRPeUJ5WlhSMWNtNGdkRnN4WFRzZ2ZTd2dkSEo1Y3pvZ1cxMHNJRzl3Y3pvZ1cxMGdmU3dnWml3Z2VTd2dkQ3dnWnp0Y2NseHVJQ0FnSUhKbGRIVnliaUJuSUQwZ2V5QnVaWGgwT2lCMlpYSmlLREFwTENCY0luUm9jbTkzWENJNklIWmxjbUlvTVNrc0lGd2ljbVYwZFhKdVhDSTZJSFpsY21Jb01pa2dmU3dnZEhsd1pXOW1JRk41YldKdmJDQTlQVDBnWENKbWRXNWpkR2x2Ymx3aUlDWW1JQ2huVzFONWJXSnZiQzVwZEdWeVlYUnZjbDBnUFNCbWRXNWpkR2x2YmlncElIc2djbVYwZFhKdUlIUm9hWE03SUgwcExDQm5PMXh5WEc0Z0lDQWdablZ1WTNScGIyNGdkbVZ5WWlodUtTQjdJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQW9kaWtnZXlCeVpYUjFjbTRnYzNSbGNDaGJiaXdnZGwwcE95QjlPeUI5WEhKY2JpQWdJQ0JtZFc1amRHbHZiaUJ6ZEdWd0tHOXdLU0I3WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLR1lwSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb1hDSkhaVzVsY21GMGIzSWdhWE1nWVd4eVpXRmtlU0JsZUdWamRYUnBibWN1WENJcE8xeHlYRzRnSUNBZ0lDQWdJSGRvYVd4bElDaGZLU0IwY25rZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9aaUE5SURFc0lIa2dKaVlnS0hRZ1BTQnZjRnN3WFNBbUlESWdQeUI1VzF3aWNtVjBkWEp1WENKZElEb2diM0JiTUYwZ1B5QjVXMXdpZEdoeWIzZGNJbDBnZkh3Z0tDaDBJRDBnZVZ0Y0luSmxkSFZ5Ymx3aVhTa2dKaVlnZEM1allXeHNLSGtwTENBd0tTQTZJSGt1Ym1WNGRDa2dKaVlnSVNoMElEMGdkQzVqWVd4c0tIa3NJRzl3V3pGZEtTa3VaRzl1WlNrZ2NtVjBkWEp1SUhRN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDVJRDBnTUN3Z2RDa2diM0FnUFNCYmIzQmJNRjBnSmlBeUxDQjBMblpoYkhWbFhUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2MzZHBkR05vSUNodmNGc3dYU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0F3T2lCallYTmxJREU2SUhRZ1BTQnZjRHNnWW5KbFlXczdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElEUTZJRjh1YkdGaVpXd3JLenNnY21WMGRYSnVJSHNnZG1Gc2RXVTZJRzl3V3pGZExDQmtiMjVsT2lCbVlXeHpaU0I5TzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0ExT2lCZkxteGhZbVZzS3lzN0lIa2dQU0J2Y0ZzeFhUc2diM0FnUFNCYk1GMDdJR052Ym5ScGJuVmxPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQTNPaUJ2Y0NBOUlGOHViM0J6TG5CdmNDZ3BPeUJmTG5SeWVYTXVjRzl3S0NrN0lHTnZiblJwYm5WbE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR1ZtWVhWc2REcGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JU2gwSUQwZ1h5NTBjbmx6TENCMElEMGdkQzVzWlc1bmRHZ2dQaUF3SUNZbUlIUmJkQzVzWlc1bmRHZ2dMU0F4WFNrZ0ppWWdLRzl3V3pCZElEMDlQU0EySUh4OElHOXdXekJkSUQwOVBTQXlLU2tnZXlCZklEMGdNRHNnWTI5dWRHbHVkV1U3SUgxY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2IzQmJNRjBnUFQwOUlETWdKaVlnS0NGMElIeDhJQ2h2Y0ZzeFhTQStJSFJiTUYwZ0ppWWdiM0JiTVYwZ1BDQjBXek5kS1NrcElIc2dYeTVzWVdKbGJDQTlJRzl3V3pGZE95QmljbVZoYXpzZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHZjRnN3WFNBOVBUMGdOaUFtSmlCZkxteGhZbVZzSUR3Z2RGc3hYU2tnZXlCZkxteGhZbVZzSUQwZ2RGc3hYVHNnZENBOUlHOXdPeUJpY21WaGF6c2dmVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwSUNZbUlGOHViR0ZpWld3Z1BDQjBXekpkS1NCN0lGOHViR0ZpWld3Z1BTQjBXekpkT3lCZkxtOXdjeTV3ZFhOb0tHOXdLVHNnWW5KbFlXczdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEZzeVhTa2dYeTV2Y0hNdWNHOXdLQ2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYeTUwY25sekxuQnZjQ2dwT3lCamIyNTBhVzUxWlR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J2Y0NBOUlHSnZaSGt1WTJGc2JDaDBhR2x6UVhKbkxDQmZLVHRjY2x4dUlDQWdJQ0FnSUNCOUlHTmhkR05vSUNobEtTQjdJRzl3SUQwZ1d6WXNJR1ZkT3lCNUlEMGdNRHNnZlNCbWFXNWhiR3g1SUhzZ1ppQTlJSFFnUFNBd095QjlYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tHOXdXekJkSUNZZ05Ta2dkR2h5YjNjZ2IzQmJNVjA3SUhKbGRIVnliaUI3SUhaaGJIVmxPaUJ2Y0Zzd1hTQS9JRzl3V3pGZElEb2dkbTlwWkNBd0xDQmtiMjVsT2lCMGNuVmxJSDA3WEhKY2JpQWdJQ0I5WEhKY2JuMWNjbHh1WEhKY2JtVjRjRzl5ZENCMllYSWdYMTlqY21WaGRHVkNhVzVrYVc1bklEMGdUMkpxWldOMExtTnlaV0YwWlNBL0lDaG1kVzVqZEdsdmJpaHZMQ0J0TENCckxDQnJNaWtnZTF4eVhHNGdJQ0FnYVdZZ0tHc3lJRDA5UFNCMWJtUmxabWx1WldRcElHc3lJRDBnYXp0Y2NseHVJQ0FnSUU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaHZMQ0JyTWl3Z2V5QmxiblZ0WlhKaFlteGxPaUIwY25WbExDQm5aWFE2SUdaMWJtTjBhVzl1S0NrZ2V5QnlaWFIxY200Z2JWdHJYVHNnZlNCOUtUdGNjbHh1ZlNrZ09pQW9ablZ1WTNScGIyNG9ieXdnYlN3Z2F5d2dheklwSUh0Y2NseHVJQ0FnSUdsbUlDaHJNaUE5UFQwZ2RXNWtaV1pwYm1Wa0tTQnJNaUE5SUdzN1hISmNiaUFnSUNCdlcyc3lYU0E5SUcxYmExMDdYSEpjYm4wcE8xeHlYRzVjY2x4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUY5ZlpYaHdiM0owVTNSaGNpaHRMQ0J2S1NCN1hISmNiaUFnSUNCbWIzSWdLSFpoY2lCd0lHbHVJRzBwSUdsbUlDaHdJQ0U5UFNCY0ltUmxabUYxYkhSY0lpQW1KaUFoVDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzVvWVhOUGQyNVFjbTl3WlhKMGVTNWpZV3hzS0c4c0lIQXBLU0JmWDJOeVpXRjBaVUpwYm1ScGJtY29ieXdnYlN3Z2NDazdYSEpjYm4xY2NseHVYSEpjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJmWDNaaGJIVmxjeWh2S1NCN1hISmNiaUFnSUNCMllYSWdjeUE5SUhSNWNHVnZaaUJUZVcxaWIyd2dQVDA5SUZ3aVpuVnVZM1JwYjI1Y0lpQW1KaUJUZVcxaWIyd3VhWFJsY21GMGIzSXNJRzBnUFNCeklDWW1JRzliYzEwc0lHa2dQU0F3TzF4eVhHNGdJQ0FnYVdZZ0tHMHBJSEpsZEhWeWJpQnRMbU5oYkd3b2J5azdYSEpjYmlBZ0lDQnBaaUFvYnlBbUppQjBlWEJsYjJZZ2J5NXNaVzVuZEdnZ1BUMDlJRndpYm5WdFltVnlYQ0lwSUhKbGRIVnliaUI3WEhKY2JpQWdJQ0FnSUNBZ2JtVjRkRG9nWm5WdVkzUnBiMjRnS0NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ieUFtSmlCcElENDlJRzh1YkdWdVozUm9LU0J2SUQwZ2RtOXBaQ0F3TzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdleUIyWVd4MVpUb2dieUFtSmlCdlcya3JLMTBzSUdSdmJtVTZJQ0Z2SUgwN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdmVHRjY2x4dUlDQWdJSFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvY3lBL0lGd2lUMkpxWldOMElHbHpJRzV2ZENCcGRHVnlZV0pzWlM1Y0lpQTZJRndpVTNsdFltOXNMbWwwWlhKaGRHOXlJR2x6SUc1dmRDQmtaV1pwYm1Wa0xsd2lLVHRjY2x4dWZWeHlYRzVjY2x4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUY5ZmNtVmhaQ2h2TENCdUtTQjdYSEpjYmlBZ0lDQjJZWElnYlNBOUlIUjVjR1Z2WmlCVGVXMWliMndnUFQwOUlGd2lablZ1WTNScGIyNWNJaUFtSmlCdlcxTjViV0p2YkM1cGRHVnlZWFJ2Y2wwN1hISmNiaUFnSUNCcFppQW9JVzBwSUhKbGRIVnliaUJ2TzF4eVhHNGdJQ0FnZG1GeUlHa2dQU0J0TG1OaGJHd29ieWtzSUhJc0lHRnlJRDBnVzEwc0lHVTdYSEpjYmlBZ0lDQjBjbmtnZTF4eVhHNGdJQ0FnSUNBZ0lIZG9hV3hsSUNnb2JpQTlQVDBnZG05cFpDQXdJSHg4SUc0dExTQStJREFwSUNZbUlDRW9jaUE5SUdrdWJtVjRkQ2dwS1M1a2IyNWxLU0JoY2k1d2RYTm9LSEl1ZG1Gc2RXVXBPMXh5WEc0Z0lDQWdmVnh5WEc0Z0lDQWdZMkYwWTJnZ0tHVnljbTl5S1NCN0lHVWdQU0I3SUdWeWNtOXlPaUJsY25KdmNpQjlPeUI5WEhKY2JpQWdJQ0JtYVc1aGJHeDVJSHRjY2x4dUlDQWdJQ0FnSUNCMGNua2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvY2lBbUppQWhjaTVrYjI1bElDWW1JQ2h0SUQwZ2FWdGNJbkpsZEhWeWJsd2lYU2twSUcwdVkyRnNiQ2hwS1R0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnWm1sdVlXeHNlU0I3SUdsbUlDaGxLU0IwYUhKdmR5QmxMbVZ5Y205eU95QjlYSEpjYmlBZ0lDQjlYSEpjYmlBZ0lDQnlaWFIxY200Z1lYSTdYSEpjYm4xY2NseHVYSEpjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJmWDNOd2NtVmhaQ2dwSUh0Y2NseHVJQ0FnSUdadmNpQW9kbUZ5SUdGeUlEMGdXMTBzSUdrZ1BTQXdPeUJwSUR3Z1lYSm5kVzFsYm5SekxteGxibWQwYURzZ2FTc3JLVnh5WEc0Z0lDQWdJQ0FnSUdGeUlEMGdZWEl1WTI5dVkyRjBLRjlmY21WaFpDaGhjbWQxYldWdWRITmJhVjBwS1R0Y2NseHVJQ0FnSUhKbGRIVnliaUJoY2p0Y2NseHVmVnh5WEc1Y2NseHVaWGh3YjNKMElHWjFibU4wYVc5dUlGOWZjM0J5WldGa1FYSnlZWGx6S0NrZ2UxeHlYRzRnSUNBZ1ptOXlJQ2gyWVhJZ2N5QTlJREFzSUdrZ1BTQXdMQ0JwYkNBOUlHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnN0lHa2dQQ0JwYkRzZ2FTc3JLU0J6SUNzOUlHRnlaM1Z0Wlc1MGMxdHBYUzVzWlc1bmRHZzdYSEpjYmlBZ0lDQm1iM0lnS0haaGNpQnlJRDBnUVhKeVlYa29jeWtzSUdzZ1BTQXdMQ0JwSUQwZ01Ec2dhU0E4SUdsc095QnBLeXNwWEhKY2JpQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ1lTQTlJR0Z5WjNWdFpXNTBjMXRwWFN3Z2FpQTlJREFzSUdwc0lEMGdZUzVzWlc1bmRHZzdJR29nUENCcWJEc2dhaXNyTENCckt5c3BYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lISmJhMTBnUFNCaFcycGRPMXh5WEc0Z0lDQWdjbVYwZFhKdUlISTdYSEpjYm4wN1hISmNibHh5WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWDE5aGQyRnBkQ2gyS1NCN1hISmNiaUFnSUNCeVpYUjFjbTRnZEdocGN5QnBibk4wWVc1alpXOW1JRjlmWVhkaGFYUWdQeUFvZEdocGN5NTJJRDBnZGl3Z2RHaHBjeWtnT2lCdVpYY2dYMTloZDJGcGRDaDJLVHRjY2x4dWZWeHlYRzVjY2x4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUY5ZllYTjVibU5IWlc1bGNtRjBiM0lvZEdocGMwRnlaeXdnWDJGeVozVnRaVzUwY3l3Z1oyVnVaWEpoZEc5eUtTQjdYSEpjYmlBZ0lDQnBaaUFvSVZONWJXSnZiQzVoYzNsdVkwbDBaWEpoZEc5eUtTQjBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLRndpVTNsdFltOXNMbUZ6ZVc1alNYUmxjbUYwYjNJZ2FYTWdibTkwSUdSbFptbHVaV1F1WENJcE8xeHlYRzRnSUNBZ2RtRnlJR2NnUFNCblpXNWxjbUYwYjNJdVlYQndiSGtvZEdocGMwRnlaeXdnWDJGeVozVnRaVzUwY3lCOGZDQmJYU2tzSUdrc0lIRWdQU0JiWFR0Y2NseHVJQ0FnSUhKbGRIVnliaUJwSUQwZ2UzMHNJSFpsY21Jb1hDSnVaWGgwWENJcExDQjJaWEppS0Z3aWRHaHliM2RjSWlrc0lIWmxjbUlvWENKeVpYUjFjbTVjSWlrc0lHbGJVM2x0WW05c0xtRnplVzVqU1hSbGNtRjBiM0pkSUQwZ1puVnVZM1JwYjI0Z0tDa2dleUJ5WlhSMWNtNGdkR2hwY3pzZ2ZTd2dhVHRjY2x4dUlDQWdJR1oxYm1OMGFXOXVJSFpsY21Jb2Jpa2dleUJwWmlBb1oxdHVYU2tnYVZ0dVhTQTlJR1oxYm1OMGFXOXVJQ2gyS1NCN0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTaG1kVzVqZEdsdmJpQW9ZU3dnWWlrZ2V5QnhMbkIxYzJnb1cyNHNJSFlzSUdFc0lHSmRLU0ErSURFZ2ZId2djbVZ6ZFcxbEtHNHNJSFlwT3lCOUtUc2dmVHNnZlZ4eVhHNGdJQ0FnWm5WdVkzUnBiMjRnY21WemRXMWxLRzRzSUhZcElIc2dkSEo1SUhzZ2MzUmxjQ2huVzI1ZEtIWXBLVHNnZlNCallYUmphQ0FvWlNrZ2V5QnpaWFIwYkdVb2NWc3dYVnN6WFN3Z1pTazdJSDBnZlZ4eVhHNGdJQ0FnWm5WdVkzUnBiMjRnYzNSbGNDaHlLU0I3SUhJdWRtRnNkV1VnYVc1emRHRnVZMlZ2WmlCZlgyRjNZV2wwSUQ4Z1VISnZiV2x6WlM1eVpYTnZiSFpsS0hJdWRtRnNkV1V1ZGlrdWRHaGxiaWhtZFd4bWFXeHNMQ0J5WldwbFkzUXBJRG9nYzJWMGRHeGxLSEZiTUYxYk1sMHNJSElwT3lCOVhISmNiaUFnSUNCbWRXNWpkR2x2YmlCbWRXeG1hV3hzS0haaGJIVmxLU0I3SUhKbGMzVnRaU2hjSW01bGVIUmNJaXdnZG1Gc2RXVXBPeUI5WEhKY2JpQWdJQ0JtZFc1amRHbHZiaUJ5WldwbFkzUW9kbUZzZFdVcElIc2djbVZ6ZFcxbEtGd2lkR2h5YjNkY0lpd2dkbUZzZFdVcE95QjlYSEpjYmlBZ0lDQm1kVzVqZEdsdmJpQnpaWFIwYkdVb1ppd2dkaWtnZXlCcFppQW9aaWgyS1N3Z2NTNXphR2xtZENncExDQnhMbXhsYm1kMGFDa2djbVZ6ZFcxbEtIRmJNRjFiTUYwc0lIRmJNRjFiTVYwcE95QjlYSEpjYm4xY2NseHVYSEpjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJmWDJGemVXNWpSR1ZzWldkaGRHOXlLRzhwSUh0Y2NseHVJQ0FnSUhaaGNpQnBMQ0J3TzF4eVhHNGdJQ0FnY21WMGRYSnVJR2tnUFNCN2ZTd2dkbVZ5WWloY0ltNWxlSFJjSWlrc0lIWmxjbUlvWENKMGFISnZkMXdpTENCbWRXNWpkR2x2YmlBb1pTa2dleUIwYUhKdmR5QmxPeUI5S1N3Z2RtVnlZaWhjSW5KbGRIVnlibHdpS1N3Z2FWdFRlVzFpYjJ3dWFYUmxjbUYwYjNKZElEMGdablZ1WTNScGIyNGdLQ2tnZXlCeVpYUjFjbTRnZEdocGN6c2dmU3dnYVR0Y2NseHVJQ0FnSUdaMWJtTjBhVzl1SUhabGNtSW9iaXdnWmlrZ2V5QnBXMjVkSUQwZ2IxdHVYU0EvSUdaMWJtTjBhVzl1SUNoMktTQjdJSEpsZEhWeWJpQW9jQ0E5SUNGd0tTQS9JSHNnZG1Gc2RXVTZJRjlmWVhkaGFYUW9iMXR1WFNoMktTa3NJR1J2Ym1VNklHNGdQVDA5SUZ3aWNtVjBkWEp1WENJZ2ZTQTZJR1lnUHlCbUtIWXBJRG9nZGpzZ2ZTQTZJR1k3SUgxY2NseHVmVnh5WEc1Y2NseHVaWGh3YjNKMElHWjFibU4wYVc5dUlGOWZZWE41Ym1OV1lXeDFaWE1vYnlrZ2UxeHlYRzRnSUNBZ2FXWWdLQ0ZUZVcxaWIyd3VZWE41Ym1OSmRHVnlZWFJ2Y2lrZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpaGNJbE41YldKdmJDNWhjM2x1WTBsMFpYSmhkRzl5SUdseklHNXZkQ0JrWldacGJtVmtMbHdpS1R0Y2NseHVJQ0FnSUhaaGNpQnRJRDBnYjF0VGVXMWliMnd1WVhONWJtTkpkR1Z5WVhSdmNsMHNJR2s3WEhKY2JpQWdJQ0J5WlhSMWNtNGdiU0EvSUcwdVkyRnNiQ2h2S1NBNklDaHZJRDBnZEhsd1pXOW1JRjlmZG1Gc2RXVnpJRDA5UFNCY0ltWjFibU4wYVc5dVhDSWdQeUJmWDNaaGJIVmxjeWh2S1NBNklHOWJVM2x0WW05c0xtbDBaWEpoZEc5eVhTZ3BMQ0JwSUQwZ2UzMHNJSFpsY21Jb1hDSnVaWGgwWENJcExDQjJaWEppS0Z3aWRHaHliM2RjSWlrc0lIWmxjbUlvWENKeVpYUjFjbTVjSWlrc0lHbGJVM2x0WW05c0xtRnplVzVqU1hSbGNtRjBiM0pkSUQwZ1puVnVZM1JwYjI0Z0tDa2dleUJ5WlhSMWNtNGdkR2hwY3pzZ2ZTd2dhU2s3WEhKY2JpQWdJQ0JtZFc1amRHbHZiaUIyWlhKaUtHNHBJSHNnYVZ0dVhTQTlJRzliYmwwZ0ppWWdablZ1WTNScGIyNGdLSFlwSUhzZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtHWjFibU4wYVc5dUlDaHlaWE52YkhabExDQnlaV3BsWTNRcElIc2dkaUE5SUc5YmJsMG9kaWtzSUhObGRIUnNaU2h5WlhOdmJIWmxMQ0J5WldwbFkzUXNJSFl1Wkc5dVpTd2dkaTUyWVd4MVpTazdJSDBwT3lCOU95QjlYSEpjYmlBZ0lDQm1kVzVqZEdsdmJpQnpaWFIwYkdVb2NtVnpiMngyWlN3Z2NtVnFaV04wTENCa0xDQjJLU0I3SUZCeWIyMXBjMlV1Y21WemIyeDJaU2gyS1M1MGFHVnVLR1oxYm1OMGFXOXVLSFlwSUhzZ2NtVnpiMngyWlNoN0lIWmhiSFZsT2lCMkxDQmtiMjVsT2lCa0lIMHBPeUI5TENCeVpXcGxZM1FwT3lCOVhISmNibjFjY2x4dVhISmNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQmZYMjFoYTJWVVpXMXdiR0YwWlU5aWFtVmpkQ2hqYjI5clpXUXNJSEpoZHlrZ2UxeHlYRzRnSUNBZ2FXWWdLRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNrZ2V5QlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvWTI5dmEyVmtMQ0JjSW5KaGQxd2lMQ0I3SUhaaGJIVmxPaUJ5WVhjZ2ZTazdJSDBnWld4elpTQjdJR052YjJ0bFpDNXlZWGNnUFNCeVlYYzdJSDFjY2x4dUlDQWdJSEpsZEhWeWJpQmpiMjlyWldRN1hISmNibjA3WEhKY2JseHlYRzUyWVhJZ1gxOXpaWFJOYjJSMWJHVkVaV1poZFd4MElEMGdUMkpxWldOMExtTnlaV0YwWlNBL0lDaG1kVzVqZEdsdmJpaHZMQ0IyS1NCN1hISmNiaUFnSUNCUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29ieXdnWENKa1pXWmhkV3gwWENJc0lIc2daVzUxYldWeVlXSnNaVG9nZEhKMVpTd2dkbUZzZFdVNklIWWdmU2s3WEhKY2JuMHBJRG9nWm5WdVkzUnBiMjRvYnl3Z2Rpa2dlMXh5WEc0Z0lDQWdiMXRjSW1SbFptRjFiSFJjSWwwZ1BTQjJPMXh5WEc1OU8xeHlYRzVjY2x4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUY5ZmFXMXdiM0owVTNSaGNpaHRiMlFwSUh0Y2NseHVJQ0FnSUdsbUlDaHRiMlFnSmlZZ2JXOWtMbDlmWlhOTmIyUjFiR1VwSUhKbGRIVnliaUJ0YjJRN1hISmNiaUFnSUNCMllYSWdjbVZ6ZFd4MElEMGdlMzA3WEhKY2JpQWdJQ0JwWmlBb2JXOWtJQ0U5SUc1MWJHd3BJR1p2Y2lBb2RtRnlJR3NnYVc0Z2JXOWtLU0JwWmlBb2F5QWhQVDBnWENKa1pXWmhkV3gwWENJZ0ppWWdUMkpxWldOMExuQnliM1J2ZEhsd1pTNW9ZWE5QZDI1UWNtOXdaWEowZVM1allXeHNLRzF2WkN3Z2F5a3BJRjlmWTNKbFlYUmxRbWx1WkdsdVp5aHlaWE4xYkhRc0lHMXZaQ3dnYXlrN1hISmNiaUFnSUNCZlgzTmxkRTF2WkhWc1pVUmxabUYxYkhRb2NtVnpkV3gwTENCdGIyUXBPMXh5WEc0Z0lDQWdjbVYwZFhKdUlISmxjM1ZzZER0Y2NseHVmVnh5WEc1Y2NseHVaWGh3YjNKMElHWjFibU4wYVc5dUlGOWZhVzF3YjNKMFJHVm1ZWFZzZENodGIyUXBJSHRjY2x4dUlDQWdJSEpsZEhWeWJpQW9iVzlrSUNZbUlHMXZaQzVmWDJWelRXOWtkV3hsS1NBL0lHMXZaQ0E2SUhzZ1pHVm1ZWFZzZERvZ2JXOWtJSDA3WEhKY2JuMWNjbHh1WEhKY2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCZlgyTnNZWE56VUhKcGRtRjBaVVpwWld4a1IyVjBLSEpsWTJWcGRtVnlMQ0J3Y21sMllYUmxUV0Z3S1NCN1hISmNiaUFnSUNCcFppQW9JWEJ5YVhaaGRHVk5ZWEF1YUdGektISmxZMlZwZG1WeUtTa2dlMXh5WEc0Z0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb1hDSmhkSFJsYlhCMFpXUWdkRzhnWjJWMElIQnlhWFpoZEdVZ1ptbGxiR1FnYjI0Z2JtOXVMV2x1YzNSaGJtTmxYQ0lwTzF4eVhHNGdJQ0FnZlZ4eVhHNGdJQ0FnY21WMGRYSnVJSEJ5YVhaaGRHVk5ZWEF1WjJWMEtISmxZMlZwZG1WeUtUdGNjbHh1ZlZ4eVhHNWNjbHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJRjlmWTJ4aGMzTlFjbWwyWVhSbFJtbGxiR1JUWlhRb2NtVmpaV2wyWlhJc0lIQnlhWFpoZEdWTllYQXNJSFpoYkhWbEtTQjdYSEpjYmlBZ0lDQnBaaUFvSVhCeWFYWmhkR1ZOWVhBdWFHRnpLSEpsWTJWcGRtVnlLU2tnZTF4eVhHNGdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QlVlWEJsUlhKeWIzSW9YQ0poZEhSbGJYQjBaV1FnZEc4Z2MyVjBJSEJ5YVhaaGRHVWdabWxsYkdRZ2IyNGdibTl1TFdsdWMzUmhibU5sWENJcE8xeHlYRzRnSUNBZ2ZWeHlYRzRnSUNBZ2NISnBkbUYwWlUxaGNDNXpaWFFvY21WalpXbDJaWElzSUhaaGJIVmxLVHRjY2x4dUlDQWdJSEpsZEhWeWJpQjJZV3gxWlR0Y2NseHVmVnh5WEc0aUxDSnBiWEJ2Y25RZ2RIbHdaU0I3SUUxdmJXVnVkQ0I5SUdaeWIyMGdYQ0p0YjIxbGJuUmNJanRjYm1sdGNHOXlkQ0I3SUdwdmFXNGdmU0JtY205dElGd2ljR0YwYUZ3aU8xeHVhVzF3YjNKMElIc2dibTl5YldGc2FYcGxVR0YwYUN3Z1FYQndMQ0JPYjNScFkyVXNJRlJHYVd4bElIMGdabkp2YlNCY0ltOWljMmxrYVdGdVhDSTdYRzVjYm1WNGNHOXlkQ0JqYjI1emRDQkVSVVpCVlV4VVgwUkJWRVZmUms5U1RVRlVJRDBnWENKWldWbFpMVTFOTFVSRVhDSTdYRzVjYm1SbFkyeGhjbVVnWjJ4dlltRnNJSHRjYmlBZ2FXNTBaWEptWVdObElGZHBibVJ2ZHlCN1hHNGdJQ0FnWVhCd09pQkJjSEE3WEc0Z0lDQWdiVzl0Wlc1ME9pQW9LU0E5UGlCTmIyMWxiblE3WEc0Z0lIMWNibjFjYmx4dVpYaHdiM0owSUdsdWRHVnlabUZqWlNCSlJHRnBiSGxPYjNSbFUyVjBkR2x1WjNNZ2UxeHVJQ0JtYjJ4a1pYSS9PaUJ6ZEhKcGJtYzdYRzRnSUdadmNtMWhkRDg2SUhOMGNtbHVaenRjYmlBZ2RHVnRjR3hoZEdVL09pQnpkSEpwYm1jN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUdkbGRFNXZkR1ZRWVhSb0tHUnBjbVZqZEc5eWVUb2djM1J5YVc1bkxDQm1hV3hsYm1GdFpUb2djM1J5YVc1bktUb2djM1J5YVc1bklIdGNiaUFnYVdZZ0tDRm1hV3hsYm1GdFpTNWxibVJ6VjJsMGFDaGNJaTV0WkZ3aUtTa2dlMXh1SUNBZ0lHWnBiR1Z1WVcxbElDczlJRndpTG0xa1hDSTdYRzRnSUgxY2JpQWdjbVYwZFhKdUlHNXZjbTFoYkdsNlpWQmhkR2dvYW05cGJpaGthWEpsWTNSdmNua3NJR1pwYkdWdVlXMWxLU2s3WEc1OVhHNWNiaThxS2x4dUlDb2dVbVZoWkNCMGFHVWdkWE5sY2lCelpYUjBhVzVuY3lCbWIzSWdkR2hsSUdCa1lXbHNlUzF1YjNSbGMyQWdjR3gxWjJsdVhHNGdLaUIwYnlCclpXVndJR0psYUdGMmFXOXlJRzltSUdOeVpXRjBhVzVuSUdFZ2JtVjNJRzV2ZEdVZ2FXNHRjM2x1WXk1Y2JpQXFMMXh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJR2RsZEVSaGFXeDVUbTkwWlZObGRIUnBibWR6S0NrNklFbEVZV2xzZVU1dmRHVlRaWFIwYVc1bmN5QjdYRzRnSUhSeWVTQjdYRzRnSUNBZ0x5OGdXRmhZT2lCQlkyTmxjM01nY0hKcGRtRjBaU0JCVUVrZ1ptOXlJR2x1ZEdWeWJtRnNJSEJzZFdkcGJuTmNiaUFnSUNBdkx5QmxjMnhwYm5RdFpHbHpZV0pzWlMxdVpYaDBMV3hwYm1VZ1FIUjVjR1Z6WTNKcGNIUXRaWE5zYVc1MEwyNXZMV1Y0Y0d4cFkybDBMV0Z1ZVZ4dUlDQWdJR052Ym5OMElITmxkSFJwYm1keklEMGdLRHhoYm5rK2QybHVaRzkzTG1Gd2NDa3VhVzUwWlhKdVlXeFFiSFZuYVc1ekxuQnNkV2RwYm5OYlhDSmtZV2xzZVMxdWIzUmxjMXdpWFZ4dUlDQWdJQ0FnTG1sdWMzUmhibU5sTG05d2RHbHZibk03WEc0Z0lDQWdjbVYwZFhKdUlIdGNiaUFnSUNBZ0lHWnZjbTFoZERvZ2MyVjBkR2x1WjNNdVptOXliV0YwSUh4OElFUkZSa0ZWVEZSZlJFRlVSVjlHVDFKTlFWUXNYRzRnSUNBZ0lDQm1iMnhrWlhJNklITmxkSFJwYm1kekxtWnZiR1JsY2o4dWRISnBiU2dwSUh4OElGd2lYQ0lzWEc0Z0lDQWdJQ0IwWlcxd2JHRjBaVG9nYzJWMGRHbHVaM011ZEdWdGNHeGhkR1UvTG5SeWFXMG9LU0I4ZkNCY0lsd2lMRnh1SUNBZ0lIMDdYRzRnSUgwZ1kyRjBZMmdnS0dWeWNpa2dlMXh1SUNBZ0lHTnZibk52YkdVdWFXNW1ieWhjSWs1dklHTjFjM1J2YlNCa1lXbHNlU0J1YjNSbElITmxkSFJwYm1keklHWnZkVzVrSVZ3aUxDQmxjbklwTzF4dUlDQjlYRzU5WEc1Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCaGNIQklZWE5FWVdsc2VVNXZkR1Z6VUd4MVoybHVURzloWkdWa0tDazZJR0p2YjJ4bFlXNGdlMXh1SUNCamIyNXpkQ0I3SUdGd2NDQjlJRDBnZDJsdVpHOTNPMXh1SUNBdkx5QmxjMnhwYm5RdFpHbHpZV0pzWlMxdVpYaDBMV3hwYm1VZ1FIUjVjR1Z6WTNKcGNIUXRaWE5zYVc1MEwyNXZMV1Y0Y0d4cFkybDBMV0Z1ZVZ4dUlDQmpiMjV6ZENCa1lXbHNlVTV2ZEdWelVHeDFaMmx1SUQwZ0tEeGhibmsrWVhCd0tTNXBiblJsY201aGJGQnNkV2RwYm5NdWNHeDFaMmx1YzF0Y0ltUmhhV3g1TFc1dmRHVnpYQ0pkTzF4dUlDQnlaWFIxY200Z1pHRnBiSGxPYjNSbGMxQnNkV2RwYmlBbUppQmtZV2xzZVU1dmRHVnpVR3gxWjJsdUxtVnVZV0pzWldRN1hHNTlYRzVjYm1WNGNHOXlkQ0JoYzNsdVl5Qm1kVzVqZEdsdmJpQm5aWFJVWlcxd2JHRjBaVU52Ym5SbGJuUnpLSFJsYlhCc1lYUmxPaUJ6ZEhKcGJtY3BPaUJRY205dGFYTmxQSE4wY21sdVp6NGdlMXh1SUNCamIyNXpkQ0JoY0hBZ1BTQjNhVzVrYjNjdVlYQndJR0Z6SUVGd2NEdGNiaUFnWTI5dWMzUWdleUJ0WlhSaFpHRjBZVU5oWTJobExDQjJZWFZzZENCOUlEMGdZWEJ3TzF4dVhHNGdJR052Ym5OMElIUmxiWEJzWVhSbFVHRjBhQ0E5SUc1dmNtMWhiR2w2WlZCaGRHZ29kR1Z0Y0d4aGRHVXBPMXh1SUNCcFppQW9kR1Z0Y0d4aGRHVlFZWFJvSUQwOVBTQmNJaTljSWlrZ2UxeHVJQ0FnSUhKbGRIVnliaUJRY205dGFYTmxMbkpsYzI5c2RtVW9YQ0pjSWlrN1hHNGdJSDFjYmx4dUlDQjBjbmtnZTF4dUlDQWdJR052Ym5OMElIUmxiWEJzWVhSbFJtbHNaU0E5SUcxbGRHRmtZWFJoUTJGamFHVXVaMlYwUm1seWMzUk1hVzVyY0dGMGFFUmxjM1FvZEdWdGNHeGhkR1ZRWVhSb0xDQmNJbHdpS1R0Y2JpQWdJQ0JqYjI1emRDQmpiMjUwWlc1MGN5QTlJR0YzWVdsMElIWmhkV3gwTG1OaFkyaGxaRkpsWVdRb2RHVnRjR3hoZEdWR2FXeGxLVHRjYmlBZ0lDQnlaWFIxY200Z1kyOXVkR1Z1ZEhNN1hHNGdJSDBnWTJGMFkyZ2dLR1Z5Y2lrZ2UxeHVJQ0FnSUdOdmJuTnZiR1V1WlhKeWIzSW9ZRVpoYVd4bFpDQjBieUJ5WldGa0lHUmhhV3g1SUc1dmRHVWdkR1Z0Y0d4aGRHVWdKeVI3ZEdWdGNHeGhkR1ZRWVhSb2ZTZGdMQ0JsY25JcE8xeHVJQ0FnSUc1bGR5Qk9iM1JwWTJVb1hDSkdZV2xzWldRZ2RHOGdjbVZoWkNCMGFHVWdaR0ZwYkhrZ2JtOTBaU0IwWlcxd2JHRjBaVndpS1R0Y2JpQWdJQ0J5WlhSMWNtNGdYQ0pjSWp0Y2JpQWdmVnh1ZlZ4dVhHNHZLaXBjYmlBcUlGUm9hWE1nWm5WdVkzUnBiMjRnYldsdGFXTnpJSFJvWlNCaVpXaGhkbWx2Y2lCdlppQjBhR1VnWkdGcGJIa3RibTkwWlhNZ2NHeDFaMmx1WEc0Z0tpQnpieUJwZENCM2FXeHNJSEpsY0d4aFkyVWdlM3RrWVhSbGZYMHNJSHQ3ZEdsMGJHVjlmU3dnWVc1a0lIdDdkR2x0WlgxOUlIZHBkR2dnZEdobFhHNGdLaUJtYjNKdFlYUjBaV1FnZEdsdFpYTjBZVzF3TGx4dUlDcGNiaUFxSUU1dmRHVTZJR2wwSUdoaGN5QmhiaUJoWkdSbFpDQmliMjUxY3lCMGFHRjBJR2wwSjNNZ2JtOTBJQ2QwYjJSaGVTY2djM0JsWTJsbWFXTXVYRzRnS2k5Y2JtVjRjRzl5ZENCaGMzbHVZeUJtZFc1amRHbHZiaUJqY21WaGRHVkVZV2xzZVU1dmRHVW9aR0YwWlRvZ1RXOXRaVzUwS1RvZ1VISnZiV2x6WlR4VVJtbHNaVDRnZTF4dUlDQmpiMjV6ZENCaGNIQWdQU0IzYVc1a2IzY3VZWEJ3SUdGeklFRndjRHRjYmlBZ1kyOXVjM1FnZXlCMllYVnNkQ0I5SUQwZ1lYQndPMXh1SUNCamIyNXpkQ0J0YjIxbGJuUWdQU0IzYVc1a2IzY3ViVzl0Wlc1ME8xeHVYRzRnSUdOdmJuTjBJSHNnZEdWdGNHeGhkR1VzSUdadmNtMWhkQ3dnWm05c1pHVnlJSDBnUFNCblpYUkVZV2xzZVU1dmRHVlRaWFIwYVc1bmN5Z3BPMXh1WEc0Z0lHTnZibk4wSUhSbGJYQnNZWFJsUTI5dWRHVnVkSE1nUFNCaGQyRnBkQ0JuWlhSVVpXMXdiR0YwWlVOdmJuUmxiblJ6S0hSbGJYQnNZWFJsS1R0Y2JpQWdZMjl1YzNRZ1ptbHNaVzVoYldVZ1BTQmtZWFJsTG1admNtMWhkQ2htYjNKdFlYUXBPMXh1SUNCamIyNXpkQ0J1YjNKdFlXeHBlbVZrVUdGMGFDQTlJR2RsZEU1dmRHVlFZWFJvS0dadmJHUmxjaXdnWm1sc1pXNWhiV1VwTzF4dVhHNGdJSFJ5ZVNCN1hHNGdJQ0FnWTI5dWMzUWdZM0psWVhSbFpFWnBiR1VnUFNCaGQyRnBkQ0IyWVhWc2RDNWpjbVZoZEdVb1hHNGdJQ0FnSUNCdWIzSnRZV3hwZW1Wa1VHRjBhQ3hjYmlBZ0lDQWdJSFJsYlhCc1lYUmxRMjl1ZEdWdWRITmNiaUFnSUNBZ0lDQWdMbkpsY0d4aFkyVW9YRzRnSUNBZ0lDQWdJQ0FnTDN0N1hGeHpLaWhrWVhSbGZIUnBiV1VwWEZ4ektqb29MaW8vS1gxOUwyZHBMRnh1SUNBZ0lDQWdJQ0FnSUNoZkxDQjBhVzFsVDNKRVlYUmxMQ0J0YjIxbGJuUkdiM0p0WVhRcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCa1lYUmxMbVp2Y20xaGRDaHRiMjFsYm5SR2IzSnRZWFF1ZEhKcGJTZ3BLVHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDbGNiaUFnSUNBZ0lDQWdMbkpsY0d4aFkyVW9MM3Q3WEZ4ekttUmhkR1ZjWEhNcWZYMHZaMmtzSUdacGJHVnVZVzFsS1Z4dUlDQWdJQ0FnSUNBdWNtVndiR0ZqWlNndmUzdGNYSE1xZEdsdFpWeGNjeXA5ZlM5bmFTd2diVzl0Wlc1MEtDa3VabTl5YldGMEtGd2lTRWc2YlcxY0lpa3BYRzRnSUNBZ0lDQWdJQzV5WlhCc1lXTmxLQzk3ZTF4Y2N5cDBhWFJzWlZ4Y2N5cDlmUzluYVN3Z1ptbHNaVzVoYldVcFhHNGdJQ0FnS1R0Y2JpQWdJQ0J5WlhSMWNtNGdZM0psWVhSbFpFWnBiR1U3WEc0Z0lIMGdZMkYwWTJnZ0tHVnljaWtnZTF4dUlDQWdJR052Ym5OdmJHVXVaWEp5YjNJb1lFWmhhV3hsWkNCMGJ5QmpjbVZoZEdVZ1ptbHNaVG9nSnlSN2JtOXliV0ZzYVhwbFpGQmhkR2g5SjJBc0lHVnljaWs3WEc0Z0lDQWdibVYzSUU1dmRHbGpaU2hjSWxWdVlXSnNaU0IwYnlCamNtVmhkR1VnYm1WM0lHWnBiR1V1WENJcE8xeHVJQ0I5WEc1OVhHNGlYU3dpYm1GdFpYTWlPbHNpYm05eWJXRnNhWHBsVUdGMGFDSXNJbXB2YVc0aUxDSk9iM1JwWTJVaVhTd2liV0Z3Y0dsdVozTWlPaUk3T3pzN096czdRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJjVVJCTzBGQlEwOHNVMEZCVXl4VFFVRlRMRU5CUVVNc1QwRkJUeXhGUVVGRkxGVkJRVlVzUlVGQlJTeERRVUZETEVWQlFVVXNVMEZCVXl4RlFVRkZPMEZCUXpkRUxFbEJRVWtzVTBGQlV5eExRVUZMTEVOQlFVTXNTMEZCU3l4RlFVRkZMRVZCUVVVc1QwRkJUeXhMUVVGTExGbEJRVmtzUTBGQlF5eEhRVUZITEV0QlFVc3NSMEZCUnl4SlFVRkpMRU5CUVVNc1EwRkJReXhWUVVGVkxFOUJRVThzUlVGQlJTeEZRVUZGTEU5QlFVOHNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eEZRVUZGTzBGQlEyaElMRWxCUVVrc1QwRkJUeXhMUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NUMEZCVHl4RFFVRkRMRVZCUVVVc1ZVRkJWU3hQUVVGUExFVkJRVVVzVFVGQlRTeEZRVUZGTzBGQlF5OUVMRkZCUVZFc1UwRkJVeXhUUVVGVExFTkJRVU1zUzBGQlN5eEZRVUZGTEVWQlFVVXNTVUZCU1N4RlFVRkZMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFOUJRVThzUTBGQlF5eEZRVUZGTEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzUlVGQlJUdEJRVU51Unl4UlFVRlJMRk5CUVZNc1VVRkJVU3hEUVVGRExFdEJRVXNzUlVGQlJTeEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFOUJRVThzUTBGQlF5eEZRVUZGTEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzUlVGQlJUdEJRVU4wUnl4UlFVRlJMRk5CUVZNc1NVRkJTU3hEUVVGRExFMUJRVTBzUlVGQlJTeEZRVUZGTEUxQlFVMHNRMEZCUXl4SlFVRkpMRWRCUVVjc1QwRkJUeXhEUVVGRExFMUJRVTBzUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4TFFVRkxMRU5CUVVNc1RVRkJUU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4VFFVRlRMRVZCUVVVc1VVRkJVU3hEUVVGRExFTkJRVU1zUlVGQlJUdEJRVU4wU0N4UlFVRlJMRWxCUVVrc1EwRkJReXhEUVVGRExGTkJRVk1zUjBGQlJ5eFRRVUZUTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTlCUVU4c1JVRkJSU3hWUVVGVkxFbEJRVWtzUlVGQlJTeERRVUZETEVWQlFVVXNTVUZCU1N4RlFVRkZMRU5CUVVNc1EwRkJRenRCUVVNNVJTeExRVUZMTEVOQlFVTXNRMEZCUXp0QlFVTlFMRU5CUVVNN1FVRkRSRHRCUVVOUExGTkJRVk1zVjBGQlZ5eERRVUZETEU5QlFVOHNSVUZCUlN4SlFVRkpMRVZCUVVVN1FVRkRNME1zU1VGQlNTeEpRVUZKTEVOQlFVTXNSMEZCUnl4RlFVRkZMRXRCUVVzc1JVRkJSU3hEUVVGRExFVkJRVVVzU1VGQlNTeEZRVUZGTEZkQlFWY3NSVUZCUlN4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVWQlFVVXNSVUZCUlN4SFFVRkhMRVZCUVVVc1JVRkJSU3hGUVVGRkxFVkJRVVVzUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRE8wRkJRM0pJTEVsQlFVa3NUMEZCVHl4RFFVRkRMRWRCUVVjc1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRTlCUVU4c1JVRkJSU3hKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNVVUZCVVN4RlFVRkZMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeEZRVUZGTEU5QlFVOHNUVUZCVFN4TFFVRkxMRlZCUVZVc1MwRkJTeXhEUVVGRExFTkJRVU1zVFVGQlRTeERRVUZETEZGQlFWRXNRMEZCUXl4SFFVRkhMRmRCUVZjc1JVRkJSU3hQUVVGUExFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNN1FVRkROMG9zU1VGQlNTeFRRVUZUTEVsQlFVa3NRMEZCUXl4RFFVRkRMRVZCUVVVc1JVRkJSU3hQUVVGUExGVkJRVlVzUTBGQlF5eEZRVUZGTEVWQlFVVXNUMEZCVHl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSVHRCUVVOMFJTeEpRVUZKTEZOQlFWTXNTVUZCU1N4RFFVRkRMRVZCUVVVc1JVRkJSVHRCUVVOMFFpeFJRVUZSTEVsQlFVa3NRMEZCUXl4RlFVRkZMRTFCUVUwc1NVRkJTU3hUUVVGVExFTkJRVU1zYVVOQlFXbERMRU5CUVVNc1EwRkJRenRCUVVOMFJTeFJRVUZSTEU5QlFVOHNRMEZCUXl4RlFVRkZMRWxCUVVrN1FVRkRkRUlzV1VGQldTeEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVc1EwRkJReXhMUVVGTExFTkJRVU1zUjBGQlJ5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eFJRVUZSTEVOQlFVTXNSMEZCUnl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEU5QlFVOHNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eFJRVUZSTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eEZRVUZGTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxFbEJRVWtzUlVGQlJTeFBRVUZQTEVOQlFVTXNRMEZCUXp0QlFVTjZTeXhaUVVGWkxFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVVc1JVRkJSU3hIUVVGSExFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTTdRVUZEY0VRc1dVRkJXU3hSUVVGUkxFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTTdRVUZEZWtJc1owSkJRV2RDTEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNc1MwRkJTeXhEUVVGRExFVkJRVVVzUTBGQlF5eEhRVUZITEVWQlFVVXNRMEZCUXl4RFFVRkRMRTFCUVUwN1FVRkRPVU1zWjBKQlFXZENMRXRCUVVzc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eExRVUZMTEVWQlFVVXNRMEZCUXl4RFFVRkRMRTlCUVU4c1JVRkJSU3hMUVVGTExFVkJRVVVzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRWxCUVVrc1JVRkJSU3hMUVVGTExFVkJRVVVzUTBGQlF6dEJRVU40UlN4blFrRkJaMElzUzBGQlN5eERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRXRCUVVzc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF5eEhRVUZITEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1UwRkJVenRCUVVOcVJTeG5Ra0ZCWjBJc1MwRkJTeXhEUVVGRExFVkJRVVVzUlVGQlJTeEhRVUZITEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1IwRkJSeXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1JVRkJSU3hEUVVGRExFTkJRVU1zVTBGQlV6dEJRVU5xUlN4blFrRkJaMEk3UVVGRGFFSXNiMEpCUVc5Q0xFbEJRVWtzUlVGQlJTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRWxCUVVrc1JVRkJSU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEUxQlFVMHNSMEZCUnl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eE5RVUZOTEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1MwRkJTeXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNSVUZCUlN4RlFVRkZMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF5eFRRVUZUTEVWQlFVVTdRVUZEYUVrc2IwSkJRVzlDTEVsQlFVa3NSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhMUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNTMEZCU3l4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4SlFVRkpMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxFVkJRVVVzUTBGQlF5eERRVUZETEV0QlFVc3NSMEZCUnl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eE5RVUZOTEVWQlFVVTdRVUZETVVjc2IwSkJRVzlDTEVsQlFVa3NSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNTMEZCU3l4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeEZRVUZGTEVOQlFVTXNRMEZCUXl4TFFVRkxMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4SFFVRkhMRVZCUVVVc1EwRkJReXhEUVVGRExFMUJRVTBzUlVGQlJUdEJRVU42Uml4dlFrRkJiMElzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRXRCUVVzc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNSVUZCUlN4RFFVRkRMRU5CUVVNc1MwRkJTeXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhIUVVGSExFTkJRVU1zU1VGQlNTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1RVRkJUU3hGUVVGRk8wRkJRM1pHTEc5Q1FVRnZRaXhKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExFZEJRVWNzUlVGQlJTeERRVUZETzBGQlF6RkRMRzlDUVVGdlFpeERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1JVRkJSU3hEUVVGRExFTkJRVU1zVTBGQlV6dEJRVU16UXl4aFFVRmhPMEZCUTJJc1dVRkJXU3hGUVVGRkxFZEJRVWNzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4UFFVRlBMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03UVVGRGRrTXNVMEZCVXl4RFFVRkRMRTlCUVU4c1EwRkJReXhGUVVGRkxFVkJRVVVzUlVGQlJTeEhRVUZITEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RlFVRkZMRk5CUVZNc1JVRkJSU3hEUVVGRExFZEJRVWNzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RlFVRkZPMEZCUTJ4RkxGRkJRVkVzU1VGQlNTeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFMUJRVTBzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1QwRkJUeXhGUVVGRkxFdEJRVXNzUlVGQlJTeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF5eEhRVUZITEV0QlFVc3NRMEZCUXl4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzUTBGQlF6dEJRVU42Uml4TFFVRkxPMEZCUTB3N08wbERia2RoTEcxQ1FVRnRRaXhIUVVGSExHRkJRV0U3UVVGbGFFUXNVMEZCVXl4WFFVRlhMRU5CUVVNc1UwRkJhVUlzUlVGQlJTeFJRVUZuUWp0SlFVTjBSQ3hKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEZGQlFWRXNRMEZCUXl4TFFVRkxMRU5CUVVNc1JVRkJSVHRSUVVNM1FpeFJRVUZSTEVsQlFVa3NTMEZCU3l4RFFVRkRPMHRCUTI1Q08wbEJRMFFzVDBGQlQwRXNjMEpCUVdFc1EwRkJRME1zVTBGQlNTeERRVUZETEZOQlFWTXNSVUZCUlN4UlFVRlJMRU5CUVVNc1EwRkJReXhEUVVGRE8wRkJRMnhFTEVOQlFVTTdRVUZGUkRzN096dFRRVWxuUWl4dlFrRkJiMEk3TzBsQlEyeERMRWxCUVVrN096dFJRVWRHTEVsQlFVMHNVVUZCVVN4SFFVRlRMRTFCUVUwc1EwRkJReXhIUVVGSkxFTkJRVU1zWlVGQlpTeERRVUZETEU5QlFVOHNRMEZCUXl4aFFVRmhMRU5CUVVNN1lVRkRkRVVzVVVGQlVTeERRVUZETEU5QlFVOHNRMEZCUXp0UlFVTndRaXhQUVVGUE8xbEJRMHdzVFVGQlRTeEZRVUZGTEZGQlFWRXNRMEZCUXl4TlFVRk5MRWxCUVVrc2JVSkJRVzFDTzFsQlF6bERMRTFCUVUwc1JVRkJSU3hQUVVGQkxGRkJRVkVzUTBGQlF5eE5RVUZOTERCRFFVRkZMRWxCUVVrc1QwRkJUU3hGUVVGRk8xbEJRM0pETEZGQlFWRXNSVUZCUlN4UFFVRkJMRkZCUVZFc1EwRkJReXhSUVVGUkxEQkRRVUZGTEVsQlFVa3NUMEZCVFN4RlFVRkZPMU5CUXpGRExFTkJRVU03UzBGRFNEdEpRVUZETEU5QlFVOHNSMEZCUnl4RlFVRkZPMUZCUTFvc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eHpRMEZCYzBNc1JVRkJSU3hIUVVGSExFTkJRVU1zUTBGQlF6dExRVU16UkR0QlFVTklMRU5CUVVNN1UwRkZaU3cwUWtGQk5FSTdTVUZEYkVNc1NVRkJRU3hIUVVGSExFZEJRVXNzVFVGQlRTeEpRVUZZTEVOQlFWazdPMGxCUlhaQ0xFbEJRVTBzWjBKQlFXZENMRWRCUVZNc1IwRkJTU3hEUVVGRExHVkJRV1VzUTBGQlF5eFBRVUZQTEVOQlFVTXNZVUZCWVN4RFFVRkRMRU5CUVVNN1NVRkRNMFVzVDBGQlR5eG5Ra0ZCWjBJc1NVRkJTU3huUWtGQlowSXNRMEZCUXl4UFFVRlBMRU5CUVVNN1FVRkRkRVFzUTBGQlF6dFRRVVZ4UWl4dFFrRkJiVUlzUTBGQlF5eFJRVUZuUWpzN096czdPMjlDUVVOc1JDeEhRVUZITEVkQlFVY3NUVUZCVFN4RFFVRkRMRWRCUVZVc1EwRkJRenR2UWtGRGRFSXNZVUZCWVN4SFFVRlpMRWRCUVVjc1kwRkJaaXhGUVVGRkxFdEJRVXNzUjBGQlN5eEhRVUZITEUxQlFWSXNRMEZCVXp0dlFrRkZMMElzV1VGQldTeEhRVUZIUkN4elFrRkJZU3hEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETzI5Q1FVTTNReXhKUVVGSkxGbEJRVmtzUzBGQlN5eEhRVUZITEVWQlFVVTdkMEpCUTNoQ0xITkNRVUZQTEU5QlFVOHNRMEZCUXl4UFFVRlBMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVU03Y1VKQlF6VkNPenM3TzI5Q1FVZFBMRmxCUVZrc1IwRkJSeXhoUVVGaExFTkJRVU1zYjBKQlFXOUNMRU5CUVVNc1dVRkJXU3hGUVVGRkxFVkJRVVVzUTBGQlF5eERRVUZETzI5Q1FVTjZSQ3h4UWtGQlRTeExRVUZMTEVOQlFVTXNWVUZCVlN4RFFVRkRMRmxCUVZrc1EwRkJReXhGUVVGQk96dHZRa0ZCTDBNc1VVRkJVU3hIUVVGSExGTkJRVzlETzI5Q1FVTnlSQ3h6UWtGQlR5eFJRVUZSTEVWQlFVTTdPenR2UWtGRmFFSXNUMEZCVHl4RFFVRkRMRXRCUVVzc1EwRkJReXg1UTBGQmRVTXNXVUZCV1N4TlFVRkhMRVZCUVVVc1MwRkJSeXhEUVVGRExFTkJRVU03YjBKQlF6TkZMRWxCUVVsRkxHVkJRVTBzUTBGQlF5eDNRMEZCZDBNc1EwRkJReXhEUVVGRE8yOUNRVU55UkN4elFrRkJUeXhGUVVGRkxFVkJRVU03T3pzN08wTkJSV0k3UVVGRlJEczdPenM3T3p0VFFVOXpRaXhsUVVGbExFTkJRVU1zU1VGQldUczdPenM3TzI5Q1FVTXhReXhIUVVGSExFZEJRVWNzVFVGQlRTeERRVUZETEVkQlFWVXNRMEZCUXp0dlFrRkRkRUlzUzBGQlN5eEhRVUZMTEVkQlFVY3NUVUZCVWl4RFFVRlRPMjlDUVVOb1FpeE5RVUZOTEVkQlFVY3NUVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkJRenR2UWtGRmRrSXNTMEZCSzBJc2IwSkJRVzlDTEVWQlFVVXNSVUZCYmtRc1VVRkJVU3hqUVVGQkxFVkJRVVVzVFVGQlRTeFpRVUZCTEVWQlFVVXNUVUZCVFN4WlFVRkJMRU5CUVRSQ08yOUNRVVZ1UXl4eFFrRkJUU3h0UWtGQmJVSXNRMEZCUXl4UlFVRlJMRU5CUVVNc1JVRkJRVHM3YjBKQlFYUkVMR2RDUVVGblFpeEhRVUZITEZOQlFXMURPMjlDUVVOMFJDeFJRVUZSTEVkQlFVY3NTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF6dHZRa0ZETDBJc1kwRkJZeXhIUVVGSExGZEJRVmNzUTBGQlF5eE5RVUZOTEVWQlFVVXNVVUZCVVN4RFFVRkRMRU5CUVVNN096czdiMEpCUnk5Q0xIRkNRVUZOTEV0QlFVc3NRMEZCUXl4TlFVRk5MRU5CUTNCRExHTkJRV01zUlVGRFpDeG5Ra0ZCWjBJN05rSkJRMklzVDBGQlR5eERRVU5PTEN0Q1FVRXJRaXhGUVVNdlFpeFZRVUZETEVOQlFVTXNSVUZCUlN4VlFVRlZMRVZCUVVVc1dVRkJXVHMwUWtGRE1VSXNUMEZCVHl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExGbEJRVmtzUTBGQlF5eEpRVUZKTEVWQlFVVXNRMEZCUXl4RFFVRkRPM2xDUVVONlF5eERRVU5HT3paQ1FVTkJMRTlCUVU4c1EwRkJReXhyUWtGQmEwSXNSVUZCUlN4UlFVRlJMRU5CUVVNN05rSkJRM0pETEU5QlFVOHNRMEZCUXl4clFrRkJhMElzUlVGQlJTeE5RVUZOTEVWQlFVVXNRMEZCUXl4TlFVRk5MRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU03TmtKQlEzSkVMRTlCUVU4c1EwRkJReXh0UWtGQmJVSXNSVUZCUlN4UlFVRlJMRU5CUVVNc1EwRkRNVU1zUlVGQlFUczdiMEpCV2tzc1YwRkJWeXhIUVVGSExGTkJXVzVDTzI5Q1FVTkVMSE5DUVVGUExGZEJRVmNzUlVGQlF6czdPMjlDUVVWdVFpeFBRVUZQTEVOQlFVTXNTMEZCU3l4RFFVRkRMRFpDUVVFeVFpeGpRVUZqTEUxQlFVY3NSVUZCUlN4TFFVRkhMRU5CUVVNc1EwRkJRenR2UWtGRGFrVXNTVUZCU1VFc1pVRkJUU3hEUVVGRExEUkNRVUUwUWl4RFFVRkRMRU5CUVVNN096czdPenM3T3pzN096czdPeUo5XG4iLCJpbXBvcnQgeyBBcHAsIEJ1dHRvbkNvbXBvbmVudCwgTW9kYWwsIE5vdGljZSwgUGx1Z2luLCBQbHVnaW5TZXR0aW5nVGFiLCBTZXR0aW5nLCBUZXh0Q29tcG9uZW50IH0gZnJvbSAnb2JzaWRpYW4nO1xyXG5pbXBvcnQgeyBjcmVhdGVEYWlseU5vdGUgfSBmcm9tICdvYnNpZGlhbi1kYWlseS1ub3Rlcy1pbnRlcmZhY2UnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmV2aWV3IGV4dGVuZHMgUGx1Z2luIHtcclxuXHRzZXR0aW5nczogUmV2aWV3U2V0dGluZ3M7XHJcblxyXG5cdGFzeW5jIG9ubG9hZCgpIHtcclxuXHRcdGNvbnNvbGUubG9nKCdMb2FkaW5nIHRoZSBSZXZpZXcgcGx1Z2luLicpO1xyXG5cclxuXHRcdC8vIENoZWNrIHRoYXQgcGx1Z2lucyBjYW4gYmUgYWNjZXNzZWQuXHJcblx0XHRjb25zb2xlLmxvZyhhcHAucGx1Z2lucy5wbHVnaW5zKTtcclxuXHJcblx0XHQvLyBDaGVjayBmb3IgdGhlIE5hdHVyYWwgTGFuZ3VhZ2UgRGF0ZXMgcGx1Z2luLiBJZiBub3QgZm91bmQsIHRlbGwgdGhlIHVzZXIgdG8gaW5zdGFsbCBpdC9pbml0aWFsaXplIGl0LlxyXG5cdFx0bGV0IG5hdHVyYWxMYW5ndWFnZURhdGVzID0gYXBwLnBsdWdpbnMuZ2V0UGx1Z2luKCdubGRhdGVzLW9ic2lkaWFuJyk7XHJcblx0XHRpZiAoIW5hdHVyYWxMYW5ndWFnZURhdGVzKSB7XHJcblx0XHRcdG5ldyBOb3RpY2UoXCJUaGUgTmF0dXJhbCBMYW5ndWFnZSBEYXRlcyBwbHVnaW4gd2FzIG5vdCBmb3VuZC4gVGhlIFJldmlldyBwbHVnaW4gcmVxdWlyZXMgdGhlIE5hdHVyYWwgTGFuZ3VhZ2UgRGF0ZXMgcGx1Z2luLiBQbGVhc2UgaW5zdGFsbCBpdCBmaXJzdCBhbmQgbWFrZSBzdXJlIGl0IGlzIGVuYWJsZWQgYmVmb3JlIHVzaW5nIFJldmlldy5cIik7XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5zZXR0aW5ncyA9IChhd2FpdCB0aGlzLmxvYWREYXRhKCkpIHx8IG5ldyBSZXZpZXdTZXR0aW5ncygpO1xyXG5cclxuXHRcdHRoaXMuYWRkQ29tbWFuZCh7XHJcblx0XHRcdGlkOiAnZnV0dXJlLXJldmlldycsXHJcblx0XHRcdG5hbWU6ICdBZGQgdGhpcyBub3RlIHRvIGEgZGFpbHkgbm90ZSBmb3IgcmV2aWV3JyxcclxuXHJcblx0XHRcdGNoZWNrQ2FsbGJhY2s6IChjaGVja2luZzogYm9vbGVhbikgPT4geyAvLyBJZiBhIG5vdGUgaXMgY3VycmVudGx5IGFjdGl2ZSwgb3BlbiB0aGUgcGx1Z2luJ3MgbW9kYWwgdG8gcmVjZWl2ZSBhIGRhdGUgc3RyaW5nLlxyXG5cdFx0XHRcdGxldCBsZWFmID0gdGhpcy5hcHAud29ya3NwYWNlLmFjdGl2ZUxlYWY7XHJcblx0XHRcdFx0aWYgKGxlYWYpIHtcclxuXHRcdFx0XHRcdGlmICghY2hlY2tpbmcpIHtcclxuXHRcdFx0XHRcdFx0bmV3IFJldmlld01vZGFsKHRoaXMuYXBwKS5vcGVuKCk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHJcblx0XHR0aGlzLmFkZENvbW1hbmQoe1xyXG5cdFx0XHRpZDogJ2Z1dHVyZS1yZXZpZXctYmxvY2snLFxyXG5cdFx0XHRuYW1lOiAnQWRkIHRoaXMgYmxvY2sgdG8gYSBkYWlseSBub3RlIGZvciByZXZpZXcnLFxyXG5cclxuXHRcdFx0Y2hlY2tDYWxsYmFjazogKGNoZWNraW5nOiBib29sZWFuKSA9PiB7XHJcblx0XHRcdFx0bGV0IGxlYWYgPSB0aGlzLmFwcC53b3Jrc3BhY2UuYWN0aXZlTGVhZjtcclxuXHRcdFx0XHRpZiAobGVhZikge1xyXG5cdFx0XHRcdFx0aWYgKCFjaGVja2luZykge1xyXG5cdFx0XHRcdFx0XHRuZXcgUmV2aWV3QmxvY2tNb2RhbCh0aGlzLmFwcCkub3BlbigpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblxyXG5cdFx0dGhpcy5hZGRTZXR0aW5nVGFiKG5ldyBSZXZpZXdTZXR0aW5nVGFiKHRoaXMuYXBwLCB0aGlzKSk7XHJcblxyXG5cdH1cclxuXHJcblx0b251bmxvYWQoKSB7XHJcblx0XHRjb25zb2xlLmxvZygnVGhlIFJldmlldyBEYXRlcyBwbHVnaW4gaGFzIGJlZW4gZGlzYWJsZWQgYW5kIHVubG9hZGVkLicpO1xyXG5cdH1cclxuXHJcblx0Y3JlYXRlQmxvY2tIYXNoKGlucHV0VGV4dDogc3RyaW5nKTogc3RyaW5nIHsgLy8gQ3JlZGl0IHRvIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xMzQ5NDI2XHJcblx0XHRsZXQgb2JzaWRpYW5BcHAgPSB0aGlzLmFwcDtcclxuXHJcblx0XHRsZXQgcmVzdWx0ID0gJyc7XHJcblx0XHR2YXIgY2hhcmFjdGVycyA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODknO1xyXG5cdFx0dmFyIGNoYXJhY3RlcnNMZW5ndGggPSBjaGFyYWN0ZXJzLmxlbmd0aDtcclxuXHRcdGZvciAoIHZhciBpID0gMDsgaSA8IDc7IGkrKyApIHtcclxuXHRcdCAgIHJlc3VsdCArPSBjaGFyYWN0ZXJzLmNoYXJBdChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBjaGFyYWN0ZXJzTGVuZ3RoKSk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxuXHJcblx0Z2V0QmxvY2soaW5wdXRMaW5lOiBzdHJpbmcsIG5vdGVGaWxlOiBvYmplY3QpOiBzdHJpbmcgeyAvL1JldHVybnMgdGhlIHN0cmluZyBvZiBhIGJsb2NrIElEIGlmIGJsb2NrIGlzIGZvdW5kLCBvciBcIlwiIGlmIG5vdC5cclxuXHRcdGxldCBvYnNpZGlhbkFwcCA9IHRoaXMuYXBwO1xyXG5cdFx0bGV0IG5vdGVCbG9ja3MgPSBvYnNpZGlhbkFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShub3RlRmlsZSkuYmxvY2tzO1xyXG5cdFx0Y29uc29sZS5sb2coXCJDaGVja2luZyBpZiBsaW5lICdcIiArIGlucHV0TGluZSArIFwiJyBpcyBhIGJsb2NrLlwiKTtcclxuXHRcdGxldCBibG9ja1N0cmluZyA9IFwiXCI7XHJcblx0XHRpZiAobm90ZUJsb2NrcykgeyAvLyB0aGUgZmlsZSBkb2VzIGNvbnRhaW4gYmxvY2tzLiBJZiBub3QsIHJldHVybiBcIlwiXHJcblx0XHRcdGZvciAobGV0IGVhY2hCbG9jayBpbiBub3RlQmxvY2tzKSB7IC8vIGl0ZXJhdGUgdGhyb3VnaCB0aGUgYmxvY2tzLiBcclxuXHRcdFx0XHRjb25zb2xlLmxvZyhcIkNoZWNraW5nIGJsb2NrIF5cIiArIGVhY2hCbG9jayk7XHJcblx0XHRcdFx0bGV0IGJsb2NrUmVnRXhwID0gbmV3IFJlZ0V4cChcIihcIiArIGVhY2hCbG9jayArIFwiKSRcIiwgXCJnaW1cIik7XHJcblx0XHRcdFx0aWYgKGlucHV0TGluZS5tYXRjaChibG9ja1JlZ0V4cCkpIHsgLy8gaWYgZW5kIG9mIGlucHV0TGluZSBtYXRjaGVzIGJsb2NrLCByZXR1cm4gaXRcclxuXHRcdFx0XHRcdGJsb2NrU3RyaW5nID0gZWFjaEJsb2NrO1xyXG5cdFx0XHRcdFx0Y29uc29sZS5sb2coXCJGb3VuZCBibG9jayBeXCIgKyBibG9ja1N0cmluZyk7XHJcblx0XHRcdFx0XHRyZXR1cm4gYmxvY2tTdHJpbmc7XHJcblx0XHRcdFx0fSBcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gYmxvY2tTdHJpbmc7XHJcblx0XHR9IFxyXG5cdFx0cmV0dXJuIGJsb2NrU3RyaW5nO1xyXG5cdH1cclxuXHJcblx0YXN5bmMgc2V0UmV2aWV3RGF0ZShzb21lRGF0ZTogc3RyaW5nLCBzb21lQmxvY2s/OiBzdHJpbmcpIHtcclxuXHRcdGxldCBvYnNpZGlhbkFwcCA9IHRoaXMuYXBwO1xyXG5cdFx0bGV0IG5hdHVyYWxMYW5ndWFnZURhdGVzID0gb2JzaWRpYW5BcHAucGx1Z2lucy5nZXRQbHVnaW4oJ25sZGF0ZXMtb2JzaWRpYW4nKTsgLy8gR2V0IHRoZSBOYXR1cmFsIExhbmd1YWdlIERhdGVzIHBsdWdpbi5cclxuXHJcblx0XHRpZiAoIW5hdHVyYWxMYW5ndWFnZURhdGVzKSB7XHJcblx0XHRcdG5ldyBOb3RpY2UoXCJUaGUgTmF0dXJhbCBMYW5ndWFnZSBEYXRlcyBwbHVnaW4gaXMgbm90IGF2YWlsYWJsZS4gUGxlYXNlIG1ha2Ugc3VyZSBpdCBpcyBpbnN0YWxsZWQgYW5kIGVuYWJsZWQgYmVmb3JlIHRyeWluZyBhZ2Fpbi5cIik7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoc29tZURhdGUgPT09IFwiXCIpIHtcclxuXHRcdFx0c29tZURhdGUgPSB0aGlzLnNldHRpbmdzLmRlZmF1bHRSZXZpZXdEYXRlO1xyXG5cdFx0fVxyXG5cdFx0Ly8gVXNlIHRoZSBOYXR1cmFsIExhbmd1YWdlIERhdGVzIHBsdWdpbidzIHByb2Nlc3NEYXRlIG1ldGhvZCB0byBjb252ZXJ0IHRoZSBpbnB1dCBkYXRlIGludG8gYSBkYWlseSBub3RlIHRpdGxlLlxyXG5cdFx0bGV0IHBhcnNlZFJlc3VsdCA9IG5hdHVyYWxMYW5ndWFnZURhdGVzLnBhcnNlRGF0ZShzb21lRGF0ZSk7XHJcblx0XHRsZXQgaW5wdXREYXRlID0gcGFyc2VkUmVzdWx0LmZvcm1hdHRlZFN0cmluZztcclxuXHJcblx0XHRjb25zb2xlLmxvZyhcIkRhdGUgc3RyaW5nIHRvIHVzZTogXCIgKyBpbnB1dERhdGUpO1xyXG5cclxuXHRcdC8vIEdldCB0aGUgZm9sZGVyIHBhdGguXHJcblx0XHRsZXQgbm90ZXNGb2xkZXIgPSB0aGlzLnNldHRpbmdzLmRhaWx5Tm90ZXNGb2xkZXI7XHJcblx0XHRsZXQgbm90ZXNQYXRoID0gXCJcIjtcclxuXHRcdGlmIChub3Rlc0ZvbGRlciA9PT0gXCJcIikge1xyXG5cdFx0XHRub3Rlc1BhdGggPSBcIi9cIjsgLy8gSWYgdGhlIHVzZXIgaXMgdXNpbmcgdGhlIHJvb3QgZm9yIHRoZWlyIGRhaWx5IG5vdGVzLCBkb24ndCBhZGQgYSBzZWNvbmQgLy5cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdG5vdGVzUGF0aCA9IFwiL1wiICsgbm90ZXNGb2xkZXIgKyBcIi9cIjtcclxuXHRcdH1cclxuXHRcdGNvbnNvbGUubG9nKFwiVGhlIHBhdGggdG8gZGFpbHkgbm90ZXM6IFwiICsgbm90ZXNQYXRoKTtcclxuXHJcblx0XHQvLyBHZXQgdGhlIHJldmlldyBzZWN0aW9uIGhlYWRlci5cclxuXHRcdGxldCByZXZpZXdIZWFkaW5nID0gdGhpcy5zZXR0aW5ncy5yZXZpZXdTZWN0aW9uSGVhZGluZztcclxuXHRcdGNvbnNvbGUubG9nKFwiVGhlIHJldmlldyBzZWN0aW9uIGhlYWRpbmcgaXM6IFwiICsgcmV2aWV3SGVhZGluZyk7XHJcblxyXG5cdFx0Ly8gR2V0IHRoZSBsaW5lIHByZWZpeC5cclxuXHRcdGxldCByZXZpZXdMaW5lUHJlZml4ID0gdGhpcy5zZXR0aW5ncy5saW5lUHJlZml4O1xyXG5cdFx0Y29uc29sZS5sb2coXCJUaGUgbGluZSBwcmVmaXggaXM6IFwiICsgcmV2aWV3TGluZVByZWZpeCk7XHJcblxyXG5cdFx0Ly8gSWYgdGhlIGRhdGUgaXMgcmVjb2duaXplZCBhbmQgdmFsaWRcclxuXHRcdGlmIChwYXJzZWRSZXN1bHQubW9tZW50LmlzVmFsaWQoKSkge1xyXG5cdFx0XHQvLyBnZXQgdGhlIGN1cnJlbnQgbm90ZSBuYW1lXHJcblx0XHRcdGxldCBub3RlTmFtZSA9IG9ic2lkaWFuQXBwLndvcmtzcGFjZS5hY3RpdmVMZWFmLmdldERpc3BsYXlUZXh0KCk7XHJcblx0XHRcdGxldCBub3RlRmlsZSA9IG9ic2lkaWFuQXBwLndvcmtzcGFjZS5hY3RpdmVMZWFmLnZpZXcuZmlsZTtcclxuXHRcdFx0bGV0IG5vdGVMaW5rID0gb2JzaWRpYW5BcHAubWV0YWRhdGFDYWNoZS5maWxlVG9MaW5rdGV4dChub3RlRmlsZSwgbm90ZUZpbGUucGF0aCwgdHJ1ZSk7XHJcblxyXG5cdFx0XHRpZiAoc29tZUJsb2NrICE9IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRcdGNvbnNvbGUubG9nKFwiQ2hlY2tpbmcgZm9yIGJsb2NrOlwiKTtcclxuXHRcdFx0XHRsZXQgbGluZUJsb2NrSUQgPSB0aGlzLmdldEJsb2NrKHNvbWVCbG9jaywgbm90ZUZpbGUpO1xyXG5cdFx0XHRcdGNvbnNvbGUubG9nKGxpbmVCbG9ja0lEKTtcclxuXHJcblx0XHRcdFx0aWYgKHRoaXMuZ2V0QmxvY2soc29tZUJsb2NrLCBub3RlRmlsZSkgPT09IFwiXCIpIHsgLy8gVGhlIGxpbmUgaXMgbm90IGFscmVhZHkgYSBibG9ja1xyXG5cdFx0XHRcdFx0Y29uc29sZS5sb2coXCJUaGlzIGxpbmUgaXMgbm90IGN1cnJlbnRseSBhIGJsb2NrLiBBZGRpbmcgYSBibG9jayBJRC5cIik7XHJcblx0XHRcdFx0XHRsaW5lQmxvY2tJRCA9IHRoaXMuY3JlYXRlQmxvY2tIYXNoKHNvbWVCbG9jaykudG9TdHJpbmcoKTtcclxuXHRcdFx0XHRcdGxldCBsaW5lV2l0aEJsb2NrID0gc29tZUJsb2NrICsgXCIgXlwiICsgbGluZUJsb2NrSUQ7XHJcblx0XHRcdFx0XHRvYnNpZGlhbkFwcC52YXVsdC5yZWFkKG5vdGVGaWxlKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuXHRcdFx0XHRcdFx0bGV0IHByZXZpb3VzTm90ZVRleHQgPSByZXN1bHQ7XHJcblx0XHRcdFx0XHRcdGxldCBuZXdOb3RlVGV4dCA9IHByZXZpb3VzTm90ZVRleHQucmVwbGFjZShzb21lQmxvY2ssIGxpbmVXaXRoQmxvY2spO1xyXG5cdFx0XHRcdFx0XHRvYnNpZGlhbkFwcC52YXVsdC5tb2RpZnkobm90ZUZpbGUsIG5ld05vdGVUZXh0KTtcclxuXHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdG5vdGVMaW5rID0gbm90ZUxpbmsgKyBcIiNeXCIgKyBsaW5lQmxvY2tJRDtcclxuXHRcdFx0XHRyZXZpZXdMaW5lUHJlZml4ID0gdGhpcy5zZXR0aW5ncy5ibG9ja0xpbmVQcmVmaXg7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdC8vIGNoZWNrIGlmIHRoZSBkYWlseSBub3RlIGZpbGUgZXhpc3RzXHJcblx0XHRcdGxldCBmaWxlcyA9IG9ic2lkaWFuQXBwLnZhdWx0LmdldEZpbGVzKCk7XHJcblx0XHRcdGNvbnN0IGRhdGVGaWxlID0gZmlsZXMuZmlsdGVyKGUgPT4gZS5uYW1lID09PSBpbnB1dERhdGUgLy9oYXQtdGlwIPCfjqkgdG8gQE1ySmFja1BoaWwgZm9yIHRoaXMgbGl0dGxlIHdvcmtmbG93IFxyXG5cdFx0XHRcdHx8IGUucGF0aCA9PT0gaW5wdXREYXRlXHJcblx0XHRcdFx0fHwgZS5iYXNlbmFtZSA9PT0gaW5wdXREYXRlXHJcblx0XHRcdClbMF07XHJcblx0XHRcdGNvbnNvbGUubG9nKFwiRmlsZSBmb3VuZDpcIiArIGRhdGVGaWxlKTtcclxuXHJcblx0XHRcdGlmICghZGF0ZUZpbGUpIHsgLy90aGUgZGF0ZSBmaWxlIGRvZXMgbm90IGFscmVhZHkgZXhpc3RcclxuXHRcdFx0XHRjb25zb2xlLmxvZyhcIlRoZSBkYWlseSBub3RlIGZvciB0aGUgZ2l2ZW4gZGF0ZSBkb2VzIG5vdCBleGlzdCB5ZXQuIENyZWF0aW5nIGl0LCB0aGVuIGFwcGVuZGluZyB0aGUgcmV2aWV3IHNlY3Rpb24uXCIpXHJcblx0XHRcdFx0bGV0IG5vdGVUZXh0ID0gcmV2aWV3SGVhZGluZyArIFwiXFxuXCIgKyByZXZpZXdMaW5lUHJlZml4ICsgXCJbW1wiICsgbm90ZUxpbmsgKyBcIl1dXCI7XHJcblx0XHRcdFx0Ly8gbGV0IG5ld0RhdGVGaWxlID0gb2JzaWRpYW5BcHAudmF1bHQuY3JlYXRlKG5vdGVzUGF0aCArIGlucHV0RGF0ZSArIFwiLm1kXCIsIG5vdGVUZXh0KTsgLy9wcmV2aW91cyBhcHByb2FjaFxyXG5cdFx0XHRcdGxldCBuZXdEYXRlRmlsZSA9IGF3YWl0IGNyZWF0ZURhaWx5Tm90ZShwYXJzZWRSZXN1bHQubW9tZW50KTsgLy8gVXNlIEBsaWFtY2FpbidzIG9ic2lkaWFuLWRhaWx5LW5vdGVzLWludGVyZmFjZSB0byBjcmVhdGUgYSBkYWlseSBub3RlIHdpdGggY29yZS1kZWZpbmVkIHRlbXBsYXRlc1xyXG5cdFx0XHRcdGxldCB0ZW1wbGF0ZVRleHQgPSBhd2FpdCBvYnNpZGlhbkFwcC52YXVsdC5yZWFkKG5ld0RhdGVGaWxlKTtcclxuXHRcdFx0XHQvL2NvbnNvbGUubG9nKHRlbXBsYXRlVGV4dCk7IC8vIGZvciBkZWJ1Z2dpbmdcclxuXHRcdFx0XHRpZiAodGVtcGxhdGVUZXh0LmluY2x1ZGVzKHJldmlld0hlYWRpbmcpKSB7XHJcblx0XHRcdFx0XHRub3RlVGV4dCA9IHRlbXBsYXRlVGV4dC5yZXBsYWNlKHJldmlld0hlYWRpbmcsIG5vdGVUZXh0KTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0bm90ZVRleHQgPSB0ZW1wbGF0ZVRleHQgKyBcIlxcblwiICsgbm90ZVRleHQ7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdG9ic2lkaWFuQXBwLnZhdWx0Lm1vZGlmeShuZXdEYXRlRmlsZSwgbm90ZVRleHQpO1xyXG5cdFx0XHRcdG5ldyBOb3RpY2UoXCJTZXQgbm90ZSBcXFwiXCIgKyBub3RlTmFtZSArIFwiXFxcIiBmb3IgcmV2aWV3IG9uIFwiICsgaW5wdXREYXRlICsgXCIuXCIpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGNvbnNvbGUubG9nKFwiVGhlIGRhaWx5IG5vdGUgYWxyZWFkeSBleGlzdHMgZm9yIHRoZSBkYXRlIGdpdmVuLiBBZGRpbmcgdGhpcyBub3RlIHRvIGl0IGZvciByZXZpZXcuXCIpXHJcblx0XHRcdFx0bGV0IHByZXZpb3VzTm90ZVRleHQgPSBcIlwiO1xyXG5cdFx0XHRcdG9ic2lkaWFuQXBwLnZhdWx0LnJlYWQoZGF0ZUZpbGUpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkgeyAvLyBHZXQgdGhlIHRleHQgaW4gdGhlIG5vdGUuIFNlYXJjaCBpdCBmb3IgIyMgUmV2aWV3IGFuZCBhcHBlbmQgdG8gdGhhdCBzZWN0aW9uLiBFbHNlLCBhcHBlbmQgIyMgUmV2aWV3IGFuZCB0aGUgbGluayB0byB0aGUgbm90ZSBmb3IgcmV2aWV3LlxyXG5cdFx0XHRcdFx0cHJldmlvdXNOb3RlVGV4dCA9IHJlc3VsdDtcclxuXHRcdFx0XHRcdGNvbnNvbGUubG9nKFwiUHJldmlvdXMgTm90ZSB0ZXh0OlxcblwiICsgcHJldmlvdXNOb3RlVGV4dCk7XHJcblx0XHRcdFx0XHRsZXQgbmV3Tm90ZVRleHQgPSBcIlwiO1xyXG5cdFx0XHRcdFx0aWYgKHByZXZpb3VzTm90ZVRleHQuaW5jbHVkZXMocmV2aWV3SGVhZGluZykpIHtcclxuXHRcdFx0XHRcdFx0bmV3Tm90ZVRleHQgPSBwcmV2aW91c05vdGVUZXh0LnJlcGxhY2UocmV2aWV3SGVhZGluZywgcmV2aWV3SGVhZGluZyArIFwiXFxuXCIgKyByZXZpZXdMaW5lUHJlZml4ICsgXCJbW1wiICsgbm90ZUxpbmsgKyBcIl1dXCIpO1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0bmV3Tm90ZVRleHQgPSBwcmV2aW91c05vdGVUZXh0ICsgXCJcXG5cIiArIHJldmlld0hlYWRpbmcgKyBcIlxcblwiICsgcmV2aWV3TGluZVByZWZpeCArIFwiW1tcIiArIG5vdGVMaW5rICsgXCJdXVwiO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0b2JzaWRpYW5BcHAudmF1bHQubW9kaWZ5KGRhdGVGaWxlLCBuZXdOb3RlVGV4dCk7XHJcblx0XHRcdFx0XHRuZXcgTm90aWNlKFwiU2V0IG5vdGUgXFxcIlwiICsgbm90ZU5hbWUgKyBcIlxcXCIgZm9yIHJldmlldyBvbiBcIiArIGlucHV0RGF0ZSArIFwiLlwiKTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fVx0XHRcdFxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0bmV3IE5vdGljZShcIllvdSd2ZSBlbnRlcmVkIGFuIGludmFsaWQgZGF0ZSAobm90ZSB0aGF0IFxcXCJ0d28gd2Vla3NcXFwiIHdpbGwgbm90IHdvcmssIGJ1dCBcXFwiaW4gdHdvIHdlZWtzXFxcIiB3aWxsKS4gVGhlIG5vdGUgd2FzIG5vdCBzZXQgZm9yIHJldmlldy4gUGxlYXNlIHRyeSBhZ2Fpbi5cIik7XHJcblx0XHR9XHJcblx0XHRyZXR1cm47XHJcblx0fVxyXG59XHJcblxyXG5jbGFzcyBSZXZpZXdTZXR0aW5ncyB7XHJcblx0ZGFpbHlOb3Rlc0ZvbGRlciA9IFwiXCI7XHJcblx0cmV2aWV3U2VjdGlvbkhlYWRpbmcgPSBcIiMjIFJldmlld1wiO1xyXG5cdGxpbmVQcmVmaXggPSBcIi0gXCI7XHJcblx0ZGVmYXVsdFJldmlld0RhdGUgPSBcInRvbW9ycm93XCI7XHJcblx0YmxvY2tMaW5lUHJlZml4ID0gXCIhXCI7XHJcbn1cclxuXHJcbmNsYXNzIFJldmlld01vZGFsIGV4dGVuZHMgTW9kYWwge1xyXG5cdGNvbnN0cnVjdG9yKGFwcDogQXBwKSB7XHJcblx0XHRzdXBlcihhcHApO1xyXG5cdH1cclxuXHJcblx0b25PcGVuKCkge1xyXG5cdFx0bGV0IF90aGlzID0gdGhpcztcclxuXHRcdGNvbnNvbGUubG9nKF90aGlzKTtcclxuXHRcdGxldCB7IGNvbnRlbnRFbCB9ID0gdGhpcztcclxuXHRcdGxldCBpbnB1dERhdGVGaWVsZCA9IG5ldyBUZXh0Q29tcG9uZW50KGNvbnRlbnRFbClcclxuXHRcdFx0LnNldFBsYWNlaG9sZGVyKHRoaXMuYXBwLnBsdWdpbnMuZ2V0UGx1Z2luKFwicmV2aWV3LW9ic2lkaWFuXCIpLnNldHRpbmdzLmRlZmF1bHRSZXZpZXdEYXRlKTtcclxuXHRcdGxldCBpbnB1dEJ1dHRvbiA9IG5ldyBCdXR0b25Db21wb25lbnQoY29udGVudEVsKVxyXG5cdFx0XHQuc2V0QnV0dG9uVGV4dChcIlNldCBSZXZpZXcgRGF0ZVwiKVxyXG5cdFx0XHQub25DbGljaygoKSA9PiB7XHJcblx0XHRcdFx0bGV0IGlucHV0RGF0ZSA9IGlucHV0RGF0ZUZpZWxkLmdldFZhbHVlKCk7XHJcblx0XHRcdFx0X3RoaXMuYXBwLnBsdWdpbnMuZ2V0UGx1Z2luKFwicmV2aWV3LW9ic2lkaWFuXCIpLnNldFJldmlld0RhdGUoaW5wdXREYXRlKTtcclxuXHRcdFx0XHR0aGlzLmNsb3NlKCk7XHJcblx0XHRcdH0pO1xyXG5cdFx0aW5wdXREYXRlRmllbGQuaW5wdXRFbC5mb2N1cygpO1xyXG5cdFx0aW5wdXREYXRlRmllbGQuaW5wdXRFbC5hZGRFdmVudExpc3RlbmVyKCdrZXlwcmVzcycsIGZ1bmN0aW9uIChrZXlwcmVzc2VkKSB7XHJcblx0XHRcdGlmIChrZXlwcmVzc2VkLmtleSA9PT0gJ0VudGVyJykge1xyXG5cdFx0XHRcdHZhciBpbnB1dERhdGUgPSBpbnB1dERhdGVGaWVsZC5nZXRWYWx1ZSgpXHJcblx0XHRcdFx0X3RoaXMuYXBwLnBsdWdpbnMuZ2V0UGx1Z2luKFwicmV2aWV3LW9ic2lkaWFuXCIpLnNldFJldmlld0RhdGUoaW5wdXREYXRlKTtcclxuXHRcdFx0XHRfdGhpcy5jbG9zZSgpO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG5cdG9uQ2xvc2UoKSB7XHJcblx0XHRsZXQgeyBjb250ZW50RWwgfSA9IHRoaXM7XHJcblx0XHRjb250ZW50RWwuZW1wdHkoKTtcclxuXHR9XHJcbn1cclxuXHJcbmNsYXNzIFJldmlld0Jsb2NrTW9kYWwgZXh0ZW5kcyBNb2RhbCB7XHJcblx0Y29uc3RydWN0b3IoYXBwOiBBcHApIHtcclxuXHRcdHN1cGVyKGFwcCk7XHJcblx0fVxyXG5cclxuXHRvbk9wZW4oKSB7XHJcblx0XHRsZXQgX3RoaXMgPSB0aGlzO1xyXG5cdFx0bGV0IGVkaXRvciA9IHRoaXMuYXBwLndvcmtzcGFjZS5hY3RpdmVMZWFmLnZpZXcuc291cmNlTW9kZS5jbUVkaXRvcjtcclxuXHRcdGxldCBjdXJzb3IgPSBlZGl0b3IuZ2V0Q3Vyc29yKCk7XHJcblx0XHRsZXQgbGluZVRleHQgPSBlZGl0b3IuZ2V0TGluZShjdXJzb3IubGluZSk7XHJcblx0XHRjb25zb2xlLmxvZyhfdGhpcyk7XHJcblx0XHRsZXQgeyBjb250ZW50RWwgfSA9IHRoaXM7XHJcblx0XHRsZXQgaW5wdXREYXRlRmllbGQgPSBuZXcgVGV4dENvbXBvbmVudChjb250ZW50RWwpXHJcblx0XHRcdC5zZXRQbGFjZWhvbGRlcih0aGlzLmFwcC5wbHVnaW5zLmdldFBsdWdpbihcInJldmlldy1vYnNpZGlhblwiKS5zZXR0aW5ncy5kZWZhdWx0UmV2aWV3RGF0ZSk7XHJcblx0XHRsZXQgaW5wdXRCdXR0b24gPSBuZXcgQnV0dG9uQ29tcG9uZW50KGNvbnRlbnRFbClcclxuXHRcdFx0LnNldEJ1dHRvblRleHQoXCJTZXQgUmV2aWV3IERhdGVcIilcclxuXHRcdFx0Lm9uQ2xpY2soKCkgPT4ge1xyXG5cdFx0XHRcdGxldCBpbnB1dERhdGUgPSBpbnB1dERhdGVGaWVsZC5nZXRWYWx1ZSgpO1xyXG5cdFx0XHRcdF90aGlzLmFwcC5wbHVnaW5zLmdldFBsdWdpbihcInJldmlldy1vYnNpZGlhblwiKS5zZXRSZXZpZXdEYXRlKGlucHV0RGF0ZSwgbGluZVRleHQpO1xyXG5cdFx0XHRcdHRoaXMuY2xvc2UoKTtcclxuXHRcdFx0fSk7XHJcblx0XHRpbnB1dERhdGVGaWVsZC5pbnB1dEVsLmZvY3VzKCk7XHJcblx0XHRpbnB1dERhdGVGaWVsZC5pbnB1dEVsLmFkZEV2ZW50TGlzdGVuZXIoJ2tleXByZXNzJywgZnVuY3Rpb24gKGtleXByZXNzZWQpIHtcclxuXHRcdFx0aWYgKGtleXByZXNzZWQua2V5ID09PSAnRW50ZXInKSB7XHJcblx0XHRcdFx0dmFyIGlucHV0RGF0ZSA9IGlucHV0RGF0ZUZpZWxkLmdldFZhbHVlKClcclxuXHRcdFx0XHRfdGhpcy5hcHAucGx1Z2lucy5nZXRQbHVnaW4oXCJyZXZpZXctb2JzaWRpYW5cIikuc2V0UmV2aWV3RGF0ZShpbnB1dERhdGUsIGxpbmVUZXh0KTtcclxuXHRcdFx0XHRfdGhpcy5jbG9zZSgpO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG5cdG9uQ2xvc2UoKSB7XHJcblx0XHRsZXQgeyBjb250ZW50RWwgfSA9IHRoaXM7XHJcblx0XHRjb250ZW50RWwuZW1wdHkoKTtcclxuXHR9XHJcbn1cclxuXHJcbmNsYXNzIFJldmlld1NldHRpbmdUYWIgZXh0ZW5kcyBQbHVnaW5TZXR0aW5nVGFiIHtcclxuXHRkaXNwbGF5KCk6IHZvaWQge1xyXG5cdFx0bGV0IHsgY29udGFpbmVyRWwgfSA9IHRoaXM7XHJcblx0XHRjb25zdCBwbHVnaW46IGFueSA9ICh0aGlzIGFzIGFueSkucGx1Z2luO1xyXG5cclxuXHRcdGNvbnRhaW5lckVsLmVtcHR5KCk7XHJcblxyXG5cdFx0Y29udGFpbmVyRWwuY3JlYXRlRWwoJ2gyJywgeyB0ZXh0OiAnUmV2aWV3IFNldHRpbmdzJyB9KTtcclxuXHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdFx0LnNldE5hbWUoJ0RhaWx5IG5vdGUgbG9jYXRpb24nKVxyXG5cdFx0XHQuc2V0RGVzYygnU2V0IHRoZSBwYXRoIHRvIHlvdXIgZGFpbHkgbm90ZXMuIFVzZSB0aGUgZm9ybWF0IFwiZm9sZGVyL3N1YmZvbGRlclwiLiBEbyBub3QgdXNlIGxlYWRpbmcgb3IgdHJhaWxpbmcgc2xhc2hlcyBcIi9cIi4nKVxyXG5cdFx0XHQuYWRkVGV4dCgodGV4dCkgPT5cclxuXHRcdFx0XHR0ZXh0XHJcblx0XHRcdFx0XHQuc2V0UGxhY2Vob2xkZXIoJycpXHJcblx0XHRcdFx0XHQuc2V0VmFsdWUocGx1Z2luLnNldHRpbmdzLmRhaWx5Tm90ZXNGb2xkZXIpXHJcblx0XHRcdFx0XHQub25DaGFuZ2UoKHZhbHVlKSA9PiB7XHJcblx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKFwiVGhlIG5ldyBkYWlseSBub3RlcyBmb2xkZXI6XCIgKyB2YWx1ZSk7XHJcblx0XHRcdFx0XHRcdHBsdWdpbi5zZXR0aW5ncy5kYWlseU5vdGVzRm9sZGVyID0gdmFsdWU7XHJcblx0XHRcdFx0XHRcdHBsdWdpbi5zYXZlRGF0YShwbHVnaW4uc2V0dGluZ3MpO1xyXG5cdFx0XHRcdFx0fSlcclxuXHRcdFx0KTtcclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0XHQuc2V0TmFtZSgnUmV2aWV3IHNlY3Rpb24gaGVhZGluZycpXHJcblx0XHRcdC5zZXREZXNjKCdTZXQgdGhlIGhlYWRpbmcgdG8gdXNlIGZvciB0aGUgcmV2aWV3IHNlY3Rpb24uIEJFIENBUkVGVUw6IGl0IG11c3QgYmUgdW5pcXVlIGluIGVhY2ggZGFpbHkgbm90ZS4nKVxyXG5cdFx0XHQuYWRkVGV4dCgodGV4dCkgPT5cclxuXHRcdFx0XHR0ZXh0XHJcblx0XHRcdFx0XHQuc2V0UGxhY2Vob2xkZXIoJyMjIFJldmlldycpXHJcblx0XHRcdFx0XHQuc2V0VmFsdWUocGx1Z2luLnNldHRpbmdzLnJldmlld1NlY3Rpb25IZWFkaW5nKVxyXG5cdFx0XHRcdFx0Lm9uQ2hhbmdlKCh2YWx1ZSkgPT4ge1xyXG5cdFx0XHRcdFx0XHRpZiAodmFsdWUgPT09IFwiXCIpIHtcclxuXHRcdFx0XHRcdFx0XHRwbHVnaW4uc2V0dGluZ3MucmV2aWV3U2VjdGlvbkhlYWRpbmcgPSBcIiMjIFJldmlld1wiO1xyXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdHBsdWdpbi5zZXR0aW5ncy5yZXZpZXdTZWN0aW9uSGVhZGluZyA9IHZhbHVlO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdHBsdWdpbi5zYXZlRGF0YShwbHVnaW4uc2V0dGluZ3MpO1xyXG5cdFx0XHRcdFx0fSlcclxuXHRcdFx0KTtcclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxyXG5cdFx0XHQuc2V0TmFtZSgnTGluZSBwcmVmaXgnKVxyXG5cdFx0XHQuc2V0RGVzYygnU2V0IHRoZSBwcmVmaXggdG8gdXNlIG9uIGVhY2ggbmV3IGxpbmUuIEUuZy4sIHVzZSBgLSBgIGZvciBidWxsZXRzIG9yIGAtIFsgXSBgIGZvciB0YXNrcy4gKipJbmNsdWRlIHRoZSB0cmFpbGluZyBzcGFjZS4qKicpXHJcblx0XHRcdC5hZGRUZXh0KCh0ZXh0KSA9PlxyXG5cdFx0XHRcdHRleHRcclxuXHRcdFx0XHRcdC5zZXRQbGFjZWhvbGRlcignLSAnKVxyXG5cdFx0XHRcdFx0LnNldFZhbHVlKHBsdWdpbi5zZXR0aW5ncy5saW5lUHJlZml4KVxyXG5cdFx0XHRcdFx0Lm9uQ2hhbmdlKCh2YWx1ZSkgPT4ge1xyXG5cdFx0XHRcdFx0XHRwbHVnaW4uc2V0dGluZ3MubGluZVByZWZpeCA9IHZhbHVlO1xyXG5cdFx0XHRcdFx0XHRwbHVnaW4uc2F2ZURhdGEocGx1Z2luLnNldHRpbmdzKTtcclxuXHRcdFx0XHRcdH0pXHJcblx0XHRcdCk7XHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdFx0LnNldE5hbWUoJ0Jsb2NrIHJldmlldyBsaW5lIHByZWZpeCcpXHJcblx0XHRcdC5zZXREZXNjKCdTZXQgdGhlIHByZWZpeCB1c2VkIHdoZW4gYWRkaW5nIGJsb2NrcyB0byBkYWlseSBub3RlcyB3aXRoIFJldmlldy4gVXNlIGUuZy4sIGAtIFsgXSBgIHRvIGxpbmsgdGhlIGJsb2NrIGFzIGEgdGFzaywgb3IgYCFgIHRvIGNyZWF0ZSBlbWJlZHMuJylcclxuXHRcdFx0LmFkZFRleHQoKHRleHQpID0+IFxyXG5cdFx0XHRcdHRleHRcclxuXHRcdFx0XHRcdC5zZXRQbGFjZWhvbGRlcignIScpXHJcblx0XHRcdFx0XHQuc2V0VmFsdWUocGx1Z2luLnNldHRpbmdzLmJsb2NrTGluZVByZWZpeClcclxuXHRcdFx0XHRcdC5vbkNoYW5nZSgodmFsdWUpID0+IHtcclxuXHRcdFx0XHRcdFx0cGx1Z2luLnNldHRpbmdzLmJsb2NrTGluZVByZWZpeCA9IHZhbHVlO1xyXG5cdFx0XHRcdFx0XHRwbHVnaW4uc2F2ZURhdGEocGx1Z2luLnNldHRpbmdzKTtcclxuXHRcdFx0XHRcdH0pXHJcblx0XHRcdCk7XHJcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcclxuXHRcdFx0LnNldE5hbWUoJ0RlZmF1bHQgcmV2aWV3IGRhdGUnKVxyXG5cdFx0XHQuc2V0RGVzYygnU2V0IGEgZGVmYXVsdCBkYXRlIHRvIGJlIHVzZWQgd2hlbiBubyBkYXRlIGlzIGVudGVyZWQuIFVzZSBuYXR1cmFsIGxhbmd1YWdlOiBcIk5leHQgTW9uZGF5XCIsIFwiTm92ZW1iZXIgNXRoXCIsIGFuZCBcInRvbW9ycm93XCIgYWxsIHdvcmsuJylcclxuXHRcdFx0LmFkZFRleHQoKHRleHQpID0+IFxyXG5cdFx0XHRcdHRleHRcclxuXHRcdFx0XHRcdC5zZXRQbGFjZWhvbGRlcignJylcclxuXHRcdFx0XHRcdC5zZXRWYWx1ZShwbHVnaW4uc2V0dGluZ3MuZGVmYXVsdFJldmlld0RhdGUpXHJcblx0XHRcdFx0XHQub25DaGFuZ2UoKHZhbHVlKSA9PiB7XHJcblx0XHRcdFx0XHRcdHBsdWdpbi5zZXR0aW5ncy5kZWZhdWx0UmV2aWV3RGF0ZSA9IHZhbHVlO1xyXG5cdFx0XHRcdFx0XHRwbHVnaW4uc2F2ZURhdGEocGx1Z2luLnNldHRpbmdzKTtcclxuXHRcdFx0XHRcdH0pXHJcblx0XHRcdCk7XHJcblx0XHRcclxuXHRcdC8vIGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdoMycsIHsgdGV4dDogJ1ByZXNldCByZXZpZXcgc2NoZWR1bGVzJyB9KTtcclxuXHJcblx0XHQvKlxyXG5cdFx0VEtUS1RLOiBGaWd1cmUgb3V0IGhvdyB0byBhZGQgYSBmdW5jdGlvbiB0byBhIGJ1dHRvbiBpbnNpZGUgdGhlIHNldHRpbmcgZWxlbWVudC4gQ3VycmVudGx5IGBkb1NvbWV0aGluZ2AsIGJlbG93LCB0aHJvd3MgZXJyb3JzLlxyXG5cdFx0Y29udGFpbmVyRWwuY3JlYXRlRWwoJ2J1dHRvbicsIHsgdGV4dDogXCJBZGQgYSBuZXcgcmV2aWV3IHNjaGVkdWxlIHByZXNldFwiLCBhdHRyOiB7IG9uY2xpY2s6IFwiZG9Tb21ldGhpbmcoeyBjb25zb2xlLmxvZygnYnV0dG9uIGNsaWNrZWQnKSB9KTtcIn19KTtcclxuXHRcdCovXHJcblx0fVx0XHJcbn1cclxuIl0sIm5hbWVzIjpbIm9ic2lkaWFuIiwicGF0aCIsIk5vdGljZSIsImNyZWF0ZURhaWx5Tm90ZSIsIlBsdWdpbiIsIlRleHRDb21wb25lbnQiLCJCdXR0b25Db21wb25lbnQiLCJNb2RhbCIsIlNldHRpbmciLCJQbHVnaW5TZXR0aW5nVGFiIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLGFBQWEsR0FBRyxTQUFTLENBQUMsRUFBRSxDQUFDLEVBQUU7QUFDbkMsSUFBSSxhQUFhLEdBQUcsTUFBTSxDQUFDLGNBQWM7QUFDekMsU0FBUyxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsWUFBWSxLQUFLLElBQUksVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDO0FBQ3BGLFFBQVEsVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0FBQzFHLElBQUksT0FBTyxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQy9CLENBQUMsQ0FBQztBQUNGO0FBQ08sU0FBUyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRTtBQUNoQyxJQUFJLGFBQWEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDeEIsSUFBSSxTQUFTLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLEVBQUU7QUFDM0MsSUFBSSxDQUFDLENBQUMsU0FBUyxHQUFHLENBQUMsS0FBSyxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ3pGLENBQUM7QUF1Q0Q7QUFDTyxTQUFTLFNBQVMsQ0FBQyxPQUFPLEVBQUUsVUFBVSxFQUFFLENBQUMsRUFBRSxTQUFTLEVBQUU7QUFDN0QsSUFBSSxTQUFTLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxPQUFPLEtBQUssWUFBWSxDQUFDLEdBQUcsS0FBSyxHQUFHLElBQUksQ0FBQyxDQUFDLFVBQVUsT0FBTyxFQUFFLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUU7QUFDaEgsSUFBSSxPQUFPLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxPQUFPLENBQUMsRUFBRSxVQUFVLE9BQU8sRUFBRSxNQUFNLEVBQUU7QUFDL0QsUUFBUSxTQUFTLFNBQVMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO0FBQ25HLFFBQVEsU0FBUyxRQUFRLENBQUMsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO0FBQ3RHLFFBQVEsU0FBUyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsTUFBTSxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQyxFQUFFO0FBQ3RILFFBQVEsSUFBSSxDQUFDLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLFVBQVUsSUFBSSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQzlFLEtBQUssQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQUNEO0FBQ08sU0FBUyxXQUFXLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRTtBQUMzQyxJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDckgsSUFBSSxPQUFPLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsT0FBTyxNQUFNLEtBQUssVUFBVSxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsV0FBVyxFQUFFLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUM3SixJQUFJLFNBQVMsSUFBSSxDQUFDLENBQUMsRUFBRSxFQUFFLE9BQU8sVUFBVSxDQUFDLEVBQUUsRUFBRSxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFO0FBQ3RFLElBQUksU0FBUyxJQUFJLENBQUMsRUFBRSxFQUFFO0FBQ3RCLFFBQVEsSUFBSSxDQUFDLEVBQUUsTUFBTSxJQUFJLFNBQVMsQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDO0FBQ3RFLFFBQVEsT0FBTyxDQUFDLEVBQUUsSUFBSTtBQUN0QixZQUFZLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FB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Q0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtBQUNuRyxRQUFRLFNBQVMsUUFBUSxDQUFDLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtBQUN0RyxRQUFRLFNBQVMsSUFBSSxDQUFDLE1BQU0sRUFBRSxFQUFFLE1BQU0sQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUMsRUFBRTtBQUN0SCxRQUFRLElBQUksQ0FBQyxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxVQUFVLElBQUksRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUM5RSxLQUFLLENBQUMsQ0FBQztBQUNQLENBQUM7QUFDRDtBQUNBLFNBQVMsV0FBVyxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUU7QUFDcEMsSUFBSSxJQUFJLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3JILElBQUksT0FBTyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLE9BQU8sTUFBTSxLQUFLLFVBQVUsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLFdBQVcsRUFBRSxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDN0osSUFBSSxTQUFTLElBQUksQ0FBQyxDQUFDLEVBQUUsRUFBRSxPQUFPLFVBQVUsQ0FBQyxFQUFFLEVBQUUsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRTtBQUN0RSxJQUFJLFNBQVMsSUFBSSxDQUFDLEVBQUUsRUFBRTtBQUN0QixRQUFRLElBQUksQ0FBQyxFQUFFLE1BQU0sSUFBSSxTQUFTLENBQUMsaUNBQWlDLENBQUMsQ0FBQztBQUN0RSxRQUFRLE9BQU8sQ0FBQyxFQUFFLElBQUk7QUFDdEIsWUFBWSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztBQUN6SyxZQUFZLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxH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
